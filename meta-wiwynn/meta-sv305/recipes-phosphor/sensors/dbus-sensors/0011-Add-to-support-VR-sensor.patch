From 3bcb3fdfa796507b034b4bb66774973ffdfb3ed2 Mon Sep 17 00:00:00 2001
From: Eli Huang <Eli_Huang@wiwynn.com>
Date: Wed, 4 Nov 2020 14:17:31 +0800
Subject: [PATCH] Add to support VR sensor

Description:
- Add new deamon to support VR sensor and using i2c lib to
  get sensor value.

Design:
- Add daemon to support VR sensor.
- Read the VR register value with i2c lib.
---
 include/VRSensor.hpp                          |  41 +++
 meson.build                                   |   2 +
 meson_options.txt                             |   1 +
 service_files/meson.build                     |   1 +
 .../xyz.openbmc_project.vrsensor.service      |  14 +
 src/VRSensor.cpp                              | 252 +++++++++++++++
 src/VRSensorMain.cpp                          | 296 ++++++++++++++++++
 src/meson.build                               |  20 ++
 8 files changed, 627 insertions(+)
 create mode 100644 include/VRSensor.hpp
 create mode 100644 service_files/xyz.openbmc_project.vrsensor.service
 create mode 100644 src/VRSensor.cpp
 create mode 100644 src/VRSensorMain.cpp

diff --git a/include/VRSensor.hpp b/include/VRSensor.hpp
new file mode 100644
index 0000000..cc6ffd8
--- /dev/null
+++ b/include/VRSensor.hpp
@@ -0,0 +1,41 @@
+#pragma once
+
+#include <Thresholds.hpp>
+#include <boost/asio/steady_timer.hpp>
+#include <sdbusplus/asio/object_server.hpp>
+#include <sensor.hpp>
+
+class VRSensor : public Sensor, public std::enable_shared_from_this<VRSensor>
+{
+  public:
+    VRSensor(const std::string& path, const std::string& objectType,
+             sdbusplus::asio::object_server& objectServer,
+             std::shared_ptr<sdbusplus::asio::connection>& conn,
+             boost::asio::io_service& io, const std::string& sensorName,
+             std::vector<thresholds::Threshold>&& thresholds,
+             const std::string& sensorConfiguration,
+             const std::string& sensorUnit, const std::string& sensorTypeName,
+             const double maxValue, const double minValue,
+             const PowerState readState, const uint8_t busId,
+             const uint8_t slaveAddr, const uint8_t pmbusCmdCode,
+             const int pmbuspage, const uint8_t pmbusmode,
+             const double scaleVal);
+    ~VRSensor();
+    void setupRead(void);
+
+  private:
+    sdbusplus::asio::object_server& objServer;
+    boost::asio::steady_timer waitTimer;
+    std::string path;
+    uint8_t busId;
+    uint8_t slaveAddr;
+    uint8_t pmbusCmdCode;
+    int pmbuspage;
+    uint8_t pmbusmode;
+    double scaleVal;
+    double senValue;
+    thresholds::ThresholdTimer thresholdTimer;
+    bool visitVRReg(void);
+    void handleResponse(void);
+    void checkThresholds(void) override;
+};
diff --git a/meson.build b/meson.build
index dd94643..0315d94 100644
--- a/meson.build
+++ b/meson.build
@@ -46,6 +46,8 @@ libobmcdbus = declare_dependency(link_args : '-lobmcdbus')
 
 libobmci2c = declare_dependency(link_args : '-lobmci2c')
 
+libobmcmisc = declare_dependency(link_args : '-lobmcmisc')
+
 thresholds_a = static_library(
     'thresholds_a',
     'src/Thresholds.cpp',
diff --git a/meson_options.txt b/meson_options.txt
index 3e474f8..d6c787a 100644
--- a/meson_options.txt
+++ b/meson_options.txt
@@ -12,6 +12,7 @@ option('nic', type: 'feature', value: 'enabled', description: 'Enable NIC sensor
 option('nvme', type: 'feature', value: 'disabled', description: 'Enable NVMe sensor.',)
 option('nvme-i2c', type: 'feature', value: 'disabled', description: 'Enable NVME sensor.',)
 option('psu', type: 'feature', value: 'enabled', description: 'Enable PSU sensor.',)
+option('vr', type: 'feature', value: 'enabled', description: 'Enable VR sensor.',)
 option('external', type: 'feature', value: 'enabled', description: 'Enable External sensor.',)
 option('tests', type: 'feature', description: 'Build tests.',)
 option('validate-unsecure-feature', type : 'feature', value : 'disabled', description : 'Enables unsecure features required by validation. Note: mustbe turned off for production images.',)
diff --git a/service_files/meson.build b/service_files/meson.build
index cf59fdd..9b17a4e 100644
--- a/service_files/meson.build
+++ b/service_files/meson.build
@@ -13,6 +13,7 @@ unit_files = [
     ['nvme', 'xyz.openbmc_project.nvmesensor.service'],
     ['nvme-i2c', 'xyz.openbmc_project.nvmesensor.service'],
     ['psu', 'xyz.openbmc_project.psusensor.service'],
+    ['vr', 'xyz.openbmc_project.vrsensor.service'],
     ['external', 'xyz.openbmc_project.externalsensor.service'],
 ]
 
diff --git a/service_files/xyz.openbmc_project.vrsensor.service b/service_files/xyz.openbmc_project.vrsensor.service
new file mode 100644
index 0000000..af13f0b
--- /dev/null
+++ b/service_files/xyz.openbmc_project.vrsensor.service
@@ -0,0 +1,14 @@
+[Unit]
+Description=VR Sensor
+StopWhenUnneeded=false
+After=xyz.openbmc_project.EntityManager.service
+Wants=mapper-wait@-xyz-openbmc_project-inventory-done.service
+After=mapper-wait@-xyz-openbmc_project-inventory-done.service
+
+[Service]
+Restart=always
+RestartSec=5
+ExecStart=/usr/bin/vrsensor
+
+[Install]
+WantedBy=multi-user.target
diff --git a/src/VRSensor.cpp b/src/VRSensor.cpp
new file mode 100644
index 0000000..a1f9656
--- /dev/null
+++ b/src/VRSensor.cpp
@@ -0,0 +1,252 @@
+#include "VRSensor.hpp"
+
+#include <openbmc/libmisc.h>
+#include <openbmc/libobmci2c.h>
+
+#include <boost/algorithm/string/predicate.hpp>
+#include <boost/algorithm/string/replace.hpp>
+#include <sdbusplus/asio/connection.hpp>
+#include <sdbusplus/asio/object_server.hpp>
+
+#include <iostream>
+#include <limits>
+#include <string>
+
+static constexpr const char* sensorPathPrefix = "/xyz/openbmc_project/sensors/";
+
+static constexpr unsigned int sensorPollMs = 1000;
+static constexpr unsigned int sensorScaleFactor = 1000;
+
+VRSensor::VRSensor(const std::string& path, const std::string& objectType,
+                   sdbusplus::asio::object_server& objectServer,
+                   std::shared_ptr<sdbusplus::asio::connection>& conn,
+                   boost::asio::io_service& io, const std::string& sensorName,
+                   std::vector<thresholds::Threshold>&& _thresholds,
+                   const std::string& sensorConfiguration,
+                   const std::string& sensorUnit,
+                   const std::string& sensorTypeName, const double maxValue,
+                   const double minValue, const PowerState readState,
+                   const uint8_t busId, const uint8_t slaveAddr,
+                   const uint8_t pmbusCmdCode, const int pmbuspage,
+                   const uint8_t pmbusmode, const double scaleVal) :
+    Sensor(boost::replace_all_copy(sensorName, " ", "_"),
+           std::move(_thresholds), sensorConfiguration, objectType, false,
+           maxValue, minValue, conn, readState),
+    objServer(objectServer), waitTimer(io), path(path), busId(busId),
+    slaveAddr(slaveAddr), pmbusCmdCode(pmbusCmdCode), pmbuspage(pmbuspage),
+    pmbusmode(pmbusmode), scaleVal(scaleVal), senValue(0),
+    thresholdTimer(io, this)
+{
+    std::string dbusPath = sensorPathPrefix + sensorTypeName + name;
+
+    sensorInterface = objectServer.add_interface(
+        dbusPath, "xyz.openbmc_project.Sensor.Value");
+
+    if (thresholds::hasWarningInterface(thresholds))
+    {
+        thresholdInterfaceWarning = objectServer.add_interface(
+            dbusPath, "xyz.openbmc_project.Sensor.Threshold.Warning");
+    }
+    if (thresholds::hasCriticalInterface(thresholds))
+    {
+        thresholdInterfaceCritical = objectServer.add_interface(
+            dbusPath, "xyz.openbmc_project.Sensor.Threshold.Critical");
+    }
+    association = objectServer.add_interface(dbusPath, association::interface);
+
+    std::string unit;
+    if (sensorUnit == "temp")
+    {
+        unit = sensor_paths::unitDegreesC;
+    }
+    else if (sensorUnit == "power")
+    {
+        unit = sensor_paths::unitWatts;
+    }
+    else if (sensorUnit == "curr")
+    {
+        unit = sensor_paths::unitAmperes;
+    }
+    else if (sensorUnit == "volt")
+    {
+        unit = sensor_paths::unitVolts;
+    }
+    else
+    {
+        unit = "Unknown";
+    }
+
+    setInitialProperties(conn, unit);
+}
+
+VRSensor::~VRSensor()
+{
+    // close the Timer to cancel async operations
+    waitTimer.cancel();
+    objServer.remove_interface(thresholdInterfaceWarning);
+    objServer.remove_interface(thresholdInterfaceCritical);
+    objServer.remove_interface(sensorInterface);
+    objServer.remove_interface(association);
+}
+
+void VRSensor::setupRead(void)
+{
+    std::weak_ptr<VRSensor> weakRef = weak_from_this();
+
+    bool res = visitVRReg();
+    if (res != true)
+    {
+        incrementError();
+    }
+    else
+    {
+        handleResponse();
+    }
+
+    waitTimer.expires_from_now(std::chrono::milliseconds(sensorPollMs));
+    waitTimer.async_wait([weakRef](const boost::system::error_code& ec) {
+        std::shared_ptr<VRSensor> self = weakRef.lock();
+        if (ec == boost::asio::error::operation_aborted)
+        {
+            if (self)
+            {
+                std::cerr << "VRSensor " << self->name << " read cancelled\n";
+            }
+            else
+            {
+                std::cerr << "VRSensor read cancelled no self\n";
+            }
+            return; // we're being canceled
+        }
+
+        if (self)
+        {
+            self->setupRead();
+        }
+        else
+        {
+            std::cerr << "VRSensor weakref no self\n";
+        }
+    });
+}
+
+bool VRSensor::visitVRReg(void)
+{
+    int fd = -1;
+    int res = -1;
+    std::vector<char> filename;
+    filename.assign(20, 0);
+
+    if (!readingStateGood())
+    {
+        markAvailable(false);
+        return true;
+    }
+
+    /* 1. Open I2C Device */
+    fd = open_i2c_dev(busId, filename.data(), filename.size(), 0);
+    if (fd < 0)
+    {
+        std::cerr << "Fail to open I2C device: " << path << "\n";
+        return false;
+    }
+
+    /* 2. Set the VR Page */
+    if (pmbuspage >= 0)
+    {
+        std::vector<uint8_t> pageData = {0, static_cast<uint8_t>(pmbuspage)};
+        res = i2c_master_write(fd, slaveAddr, pageData.size(), pageData.data());
+        if (res < 0)
+        {
+            std::cerr << "Fail to write VR Page reg: " << path
+                      << ", Addr: " << slaveAddr << "\n";
+            close_i2c_dev(fd);
+            return false;
+        }
+    }
+
+    /* 3. Read the sensor value */
+    std::vector<uint8_t> cmdData;
+    cmdData.assign(1, pmbusCmdCode);
+
+    std::vector<uint8_t> readBuf;
+    readBuf.assign(2, 0x0);
+
+    res = i2c_master_write_read(fd, slaveAddr, cmdData.size(), cmdData.data(),
+                                readBuf.size(), readBuf.data());
+    if (res < 0)
+    {
+        std::cerr << "Fail to r/w I2C device: " << path
+                  << ", Addr: " << slaveAddr << "\n";
+        close_i2c_dev(fd);
+        return false;
+    }
+
+    /* 4. Convert the sensor reading based on Mode */
+    uint32_t raw_value;
+    double real_value;
+
+    raw_value = (readBuf.at(1) << 8) + readBuf.at(0);
+
+    switch (pmbusmode)
+    {
+        case 0: // Linear
+            res = Get_Linear_Data_Format(&real_value, raw_value);
+            break;
+
+        case 1: // VID 12.0
+            res = Get_VID_Data_Format(&real_value, raw_value, 1);
+            break;
+
+        case 2: // VID 12.5
+            res = Get_VID_Data_Format(&real_value, raw_value, 2);
+            break;
+        case 3: // TwosComplementInt
+            res = Get_Twos_Complement_Int_Data_Format(raw_value, &real_value);
+            break;
+        case 4:
+            real_value = raw_value;
+            break;
+        default:
+            res = -1;
+    }
+
+    if (res < 0)
+    {
+        std::cerr << "Fail to do the PMBus conversion.\n";
+        close_i2c_dev(fd);
+        return false;
+    }
+
+    senValue = real_value * scaleVal;
+    if (senValue < 0)
+    {
+        senValue = 0;
+    }
+
+    close_i2c_dev(fd);
+
+    return true;
+}
+
+void VRSensor::handleResponse()
+{
+    if (readingStateGood())
+    {
+        if (static_cast<double>(senValue) != value)
+        {
+            updateValue(senValue);
+        }
+    }
+}
+
+void VRSensor::checkThresholds(void)
+{
+    if (!readingStateGood())
+    {
+        markAvailable(false);
+        return;
+    }
+
+    thresholds::checkThresholdsPowerDelay(this, thresholdTimer);
+}
diff --git a/src/VRSensorMain.cpp b/src/VRSensorMain.cpp
new file mode 100644
index 0000000..5a9c97a
--- /dev/null
+++ b/src/VRSensorMain.cpp
@@ -0,0 +1,296 @@
+#include <Utils.hpp>
+#include <VRSensor.hpp>
+#include <boost/algorithm/string/predicate.hpp>
+#include <boost/algorithm/string/replace.hpp>
+#include <boost/container/flat_set.hpp>
+#include <sdbusplus/asio/connection.hpp>
+#include <sdbusplus/asio/object_server.hpp>
+
+#include <filesystem>
+#include <fstream>
+#include <regex>
+
+static constexpr bool DEBUG = false;
+
+namespace fs = std::filesystem;
+static constexpr std::array<const char*, 7> sensorTypes = {
+    "xyz.openbmc_project.Configuration.PXE1610",
+    "xyz.openbmc_project.Configuration.SLUSC47B",
+    "xyz.openbmc_project.Configuration.IR38163",
+    "xyz.openbmc_project.Configuration.ISL69224",
+    "xyz.openbmc_project.Configuration.ISL68223",
+    "xyz.openbmc_project.Configuration.ISL69247",
+    "xyz.openbmc_project.Configuration.ISL69242"};
+
+static boost::container::flat_map<std::string, std::string> sensorTable;
+static boost::container::flat_map<std::string, uint32_t> modeTable;
+static constexpr double maxReading = 255;
+static constexpr double minReading = 0;
+
+void createSensors(
+    boost::asio::io_service& io, sdbusplus::asio::object_server& objectServer,
+    boost::container::flat_map<std::string, std::shared_ptr<VRSensor>>& sensors,
+    std::shared_ptr<sdbusplus::asio::connection>& dbusConnection,
+    const std::shared_ptr<boost::container::flat_set<std::string>>&
+        sensorsChanged)
+{
+    bool firstScan = sensorsChanged == nullptr;
+    // use new data the first time, then refresh
+    ManagedObjectType sensorConfigurations;
+    bool useCache = false;
+    for (const char* type : sensorTypes)
+    {
+        if (!getSensorConfiguration(type, dbusConnection, sensorConfigurations,
+                                    useCache))
+        {
+            std::cerr << "error communicating to entity manager\n";
+            return;
+        }
+        useCache = true;
+    }
+
+    for (const std::pair<sdbusplus::message::object_path, SensorData>& sensor :
+         sensorConfigurations)
+    {
+        const SensorData* sensorData = nullptr;
+        const std::string* interfacePath = nullptr;
+        const char* sensorType = nullptr;
+        const std::pair<std::string, boost::container::flat_map<
+                                         std::string, BasicVariantType>>*
+            baseConfiguration = nullptr;
+
+        sensorData = &(sensor.second);
+        for (const char* type : sensorTypes)
+        {
+            auto sensorBase = sensorData->find(type);
+            if (sensorBase != sensorData->end())
+            {
+                baseConfiguration = &(*sensorBase);
+                sensorType = type;
+                break;
+            }
+        }
+        if (baseConfiguration == nullptr)
+        {
+            std::cerr << "error finding base configuration for VR \n";
+            continue;
+        }
+
+        auto configurationBus = baseConfiguration->second.find("Bus");
+        auto configurationAddress = baseConfiguration->second.find("Address");
+        auto configurationCmd = baseConfiguration->second.find("Command");
+
+        if (configurationBus == baseConfiguration->second.end() ||
+            configurationAddress == baseConfiguration->second.end() ||
+            configurationCmd == baseConfiguration->second.end())
+        {
+            std::cerr << "fail to find the bus, addr, cmd, or page in JSON\n";
+            continue;
+        }
+
+        uint8_t busId =
+            static_cast<uint8_t>(std::get<uint64_t>(configurationBus->second));
+        std::string i2cBus = "/dev/i2c-" + std::to_string(busId);
+        uint8_t slaveAddr = static_cast<uint8_t>(
+            std::get<uint64_t>(configurationAddress->second));
+        uint8_t pmbusCmdCode =
+            static_cast<uint8_t>(std::get<uint64_t>(configurationCmd->second));
+
+        if (0x80 <= slaveAddr)
+        {
+            std::cerr
+                << "error i2c slave addr is out of the range (7-bit addr)\n";
+            continue;
+        }
+
+        /* VR Page Number */
+        auto configurationPage = baseConfiguration->second.find("Page");
+        int pmbuspage = -1;
+        if (configurationPage != baseConfiguration->second.end())
+        {
+            pmbuspage =
+                static_cast<int>(std::get<uint64_t>(configurationPage->second));
+        }
+
+        interfacePath = &(sensor.first.str);
+        if (interfacePath == nullptr)
+        {
+            std::cerr << " invalid sensor interface path\n";
+            continue;
+        }
+
+        auto findSensorName = baseConfiguration->second.find("Name");
+        if (findSensorName == baseConfiguration->second.end())
+        {
+            std::cerr << "fail to find sensor name in JSON\n";
+            continue;
+        }
+        std::string sensorName = std::get<std::string>(findSensorName->second);
+
+        /* Sensor Type: power, curr, temp, volt */
+        auto findSensorTypeJson = baseConfiguration->second.find("SensorType");
+        if (findSensorTypeJson == baseConfiguration->second.end())
+        {
+            std::cerr << "fail to find sensor type in JSON\n";
+            continue;
+        }
+        std::string SensorTypeJson =
+            std::get<std::string>(findSensorTypeJson->second);
+
+        auto findSensorType = sensorTable.find(SensorTypeJson);
+        if (findSensorType == sensorTable.end())
+        {
+            std::cerr << "fail to find match for VR sensorType: "
+                      << SensorTypeJson << "\n";
+            continue;
+        }
+
+        /* Convert Method: Linear, VID12.0, VID12.5 */
+        auto findConvertModeJson = baseConfiguration->second.find("Mode");
+        if (findConvertModeJson == baseConfiguration->second.end())
+        {
+            std::cerr << "fail to find VR ConvertMode in JSON\n";
+            continue;
+        }
+        std::string ConvertModeJson =
+            std::get<std::string>(findConvertModeJson->second);
+
+        auto findConvertMode = modeTable.find(ConvertModeJson);
+        if (findConvertMode == modeTable.end())
+        {
+            std::cerr << "fail to find match for VR ConvertMode: "
+                      << ConvertModeJson << "\n";
+            continue;
+        }
+        uint32_t pmbusmode = findConvertMode->second;
+
+        // on rescans, only update sensors we were signaled by
+        auto findSensor = sensors.find(sensorName);
+        if (!firstScan && findSensor != sensors.end())
+        {
+            bool found = false;
+            for (auto it = sensorsChanged->begin(); it != sensorsChanged->end();
+                 it++)
+            {
+                if (boost::ends_with(*it, findSensor->second->name))
+                {
+                    sensorsChanged->erase(it);
+                    findSensor->second = nullptr;
+                    found = true;
+                    break;
+                }
+            }
+            if (!found)
+            {
+                continue;
+            }
+        }
+
+        std::vector<thresholds::Threshold> sensorThresholds;
+        if (!parseThresholdsFromConfig(*sensorData, sensorThresholds))
+        {
+            std::cerr << "error populating thresholds for " << sensorName
+                      << "\n";
+        }
+
+        auto limits = std::make_pair(minReading, maxReading);
+        findLimits(limits, baseConfiguration);
+
+        auto findPowerState = baseConfiguration->second.find("PowerState");
+        PowerState readState = PowerState::biosPost;
+        if (findPowerState != baseConfiguration->second.end())
+        {
+            std::string powerState =
+                std::visit(VariantToStringVisitor(), findPowerState->second);
+            setReadState(powerState, readState);
+        }
+
+        // Read the ScalueValue from JSON.
+        auto findScaleValue = baseConfiguration->second.find("ScaleValue");
+        double scaleValue = 1;
+        if (findScaleValue != baseConfiguration->second.end())
+        {
+            scaleValue =
+                std::visit(VariantToDoubleVisitor(), findScaleValue->second);
+        }
+
+        sensors[sensorName] = std::make_shared<VRSensor>(
+            i2cBus, sensorType, objectServer, dbusConnection, io, sensorName,
+            std::move(sensorThresholds), *interfacePath, findSensorType->first,
+            findSensorType->second, limits.second, limits.first, readState,
+            busId, slaveAddr, pmbusCmdCode, pmbuspage, pmbusmode, scaleValue);
+        sensors[sensorName]->setupRead();
+    }
+}
+
+void propertyInitialize(void)
+{
+    sensorTable = {{"power", "power/"},
+                   {"curr", "current/"},
+                   {"temp", "temperature/"},
+                   {"volt", "voltage/"}};
+
+    modeTable = {{"Linear", 0},
+                 {"VID12.0", 1},
+                 {"VID12.5", 2},
+                 {"TwosComplementInt", 3},
+                 {"UnsignedInt", 4}};
+}
+
+int main()
+{
+    boost::asio::io_service io;
+    auto systemBus = std::make_shared<sdbusplus::asio::connection>(io);
+    systemBus->request_name("xyz.openbmc_project.VRSensor");
+    sdbusplus::asio::object_server objectServer(systemBus);
+    boost::container::flat_map<std::string, std::shared_ptr<VRSensor>> sensors;
+    std::vector<std::unique_ptr<sdbusplus::bus::match::match>> matches;
+    std::shared_ptr<boost::container::flat_set<std::string>> sensorsChanged =
+        std::make_shared<boost::container::flat_set<std::string>>();
+
+    propertyInitialize();
+
+    io.post([&]() {
+        createSensors(io, objectServer, sensors, systemBus, nullptr);
+    });
+
+    boost::asio::steady_timer filterTimer(io);
+    std::function<void(sdbusplus::message::message&)> eventHandler =
+        [&](sdbusplus::message::message& message) {
+            if (message.is_method_error())
+            {
+                std::cerr << "callback method error\n";
+                return;
+            }
+            sensorsChanged->insert(message.get_path());
+            // this implicitly cancels the timer
+            filterTimer.expires_from_now(std::chrono::seconds(1));
+
+            filterTimer.async_wait([&](const boost::system::error_code& ec) {
+                if (ec == boost::asio::error::operation_aborted)
+                {
+                    /* we were canceled*/
+                    return;
+                }
+                else if (ec)
+                {
+                    std::cerr << "timer error\n";
+                    return;
+                }
+                createSensors(io, objectServer, sensors, systemBus,
+                              sensorsChanged);
+            });
+        };
+
+    for (const char* type : sensorTypes)
+    {
+        auto match = std::make_unique<sdbusplus::bus::match::match>(
+            static_cast<sdbusplus::bus::bus&>(*systemBus),
+            "type='signal',member='PropertiesChanged',path_namespace='" +
+                std::string(inventoryPath) + "',arg0namespace='" + type + "'",
+            eventHandler);
+        matches.emplace_back(std::move(match));
+    }
+
+    io.run();
+}
diff --git a/src/meson.build b/src/meson.build
index 5f17134..ccd3e96 100644
--- a/src/meson.build
+++ b/src/meson.build
@@ -269,6 +269,26 @@ if get_option('psu').enabled()
     )
 endif
 
+if get_option('vr').enabled()
+    executable(
+        'vrsensor',
+        'VRSensor.cpp',
+        'VRSensorMain.cpp',
+        dependencies: [
+            sdbusplus,
+            libobmci2c,
+            libobmcmisc
+        ],
+        implicit_include_directories: false,
+        include_directories: '../include',
+        install: true,
+        link_with: [
+            thresholds_a,
+            utils_a,
+        ],
+    )
+endif
+
 if get_option('external').enabled()
     executable(
         'externalsensor',
-- 
2.28.0

