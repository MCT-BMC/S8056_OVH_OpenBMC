From 89e23f256eaba6a2240a887b44fffef4f74bd165 Mon Sep 17 00:00:00 2001
From: Eli Huang <Eli_Huang@wiwynn.com>
Date: Mon, 26 Oct 2020 17:57:59 +0800
Subject: [PATCH] Add to support PSU sensor

Description:
- Revise PSU sensor daemon to probe PSU sensor.

Design:
- Add PowerState property.
- Remove PwmSensor.
- Add DEBUG judgement in DEBUG message.
---
 include/PSUSensor.hpp |  9 +++-
 src/PSUSensor.cpp     | 50 +++++++++++++++-------
 src/PSUSensorMain.cpp | 97 +++++++++++++++++++++++++++++++++----------
 3 files changed, 116 insertions(+), 40 deletions(-)

diff --git a/include/PSUSensor.hpp b/include/PSUSensor.hpp
index d63a5ac..2aab36c 100644
--- a/include/PSUSensor.hpp
+++ b/include/PSUSensor.hpp
@@ -19,8 +19,10 @@ class PSUSensor : public Sensor, public std::enable_shared_from_this<PSUSensor>
               boost::asio::io_service& io, const std::string& sensorName,
               std::vector<thresholds::Threshold>&& thresholds,
               const std::string& sensorConfiguration,
-              const std::string& sensorUnits, unsigned int factor, double max,
-              double min, const std::string& label, size_t tSize);
+              const std::string& sensorUnits, const unsigned int factor,
+              const double maxValue, const double minValue,
+              const std::string& label, size_t tSize,
+              const PowerState readState);
     ~PSUSensor() override;
     void setupRead(void);
 
@@ -41,6 +43,9 @@ class PSUSensor : public Sensor, public std::enable_shared_from_this<PSUSensor>
     int fd;
     static constexpr unsigned int sensorPollMs = 1000;
     static constexpr size_t warnAfterErrorCount = 10;
+
+    // Timer for checkThresholdsPowerDelay
+    thresholds::ThresholdTimer thresholdTimer;
 };
 
 class PSUProperty
diff --git a/src/PSUSensor.cpp b/src/PSUSensor.cpp
index 985778e..9851781 100644
--- a/src/PSUSensor.cpp
+++ b/src/PSUSensor.cpp
@@ -41,24 +41,17 @@ PSUSensor::PSUSensor(const std::string& path, const std::string& objectType,
                      std::vector<thresholds::Threshold>&& thresholdsIn,
                      const std::string& sensorConfiguration,
                      const std::string& sensorUnits, unsigned int factor,
-                     double max, double min, const std::string& label,
-                     size_t tSize) :
+                     const double maxValue, const double minValue,
+                     const std::string& label, size_t tSize,
+                     const PowerState readState) :
     Sensor(boost::replace_all_copy(sensorName, " ", "_"),
-           std::move(thresholdsIn), sensorConfiguration, objectType, false, max,
-           min, conn),
+           std::move(thresholdsIn), sensorConfiguration, objectType, false,
+           maxValue, minValue, conn, readState),
     std::enable_shared_from_this<PSUSensor>(), objServer(objectServer),
     inputDev(io), waitTimer(io), path(path), pathRatedMax(""), pathRatedMin(""),
-    sensorFactor(factor), minMaxReadCounter(0)
+    sensorFactor(factor), minMaxReadCounter(0), thresholdTimer(io, this)
 {
     std::string unitPath = sensor_paths::getPathForUnits(sensorUnits);
-    if constexpr (debug)
-    {
-        std::cerr << "Constructed sensor: path " << path << " type "
-                  << objectType << " config " << sensorConfiguration
-                  << " typename " << unitPath << " factor " << factor << " min "
-                  << min << " max " << max << " name \"" << sensorName
-                  << "\"\n";
-    }
 
     fd = open(path.c_str(), O_RDONLY);
     if (fd < 0)
@@ -168,6 +161,14 @@ void PSUSensor::handleResponse(const boost::system::error_code& err)
         return;
     }
     std::istream responseStream(readBuf.get());
+
+    // Set as sensor reading invalid for power-on type sensor
+    if (!readingStateGood())
+    {
+        markAvailable(false);
+        goto finish;
+    }
+
     if (!err)
     {
         std::string response;
@@ -193,14 +194,19 @@ void PSUSensor::handleResponse(const boost::system::error_code& err)
     }
     else
     {
-        std::cerr << "System error " << err << "\n";
+        if constexpr (debug)
+        {
+            std::cerr << "Sensor : " << name << ". System error " << err
+                      << "\n";
+        }
         incrementError();
     }
 
     lseek(fd, 0, SEEK_SET);
-    waitTimer.expires_from_now(std::chrono::milliseconds(sensorPollMs));
 
+finish:
     std::weak_ptr<PSUSensor> weakRef = weak_from_this();
+    waitTimer.expires_from_now(std::chrono::milliseconds(sensorPollMs));
     waitTimer.async_wait([weakRef](const boost::system::error_code& ec) {
         std::shared_ptr<PSUSensor> self = weakRef.lock();
         if (ec == boost::asio::error::operation_aborted)
@@ -217,5 +223,17 @@ void PSUSensor::handleResponse(const boost::system::error_code& err)
 
 void PSUSensor::checkThresholds(void)
 {
-    thresholds::checkThresholds(this);
+    if (!readingStateGood())
+    {
+        return;
+    }
+
+    if (readState == PowerState::always)
+    {
+        thresholds::checkThresholds(this);
+    }
+    else
+    {
+        thresholds::checkThresholdsPowerDelay(this, thresholdTimer);
+    }
 }
diff --git a/src/PSUSensorMain.cpp b/src/PSUSensorMain.cpp
index 6018e88..a38ecc5 100644
--- a/src/PSUSensorMain.cpp
+++ b/src/PSUSensorMain.cpp
@@ -212,7 +212,7 @@ void checkEventLimits(
     }
 }
 
-static void
+[[maybe_unused]] static void
     checkPWMSensor(const fs::path& sensorPath, std::string& labelHead,
                    const std::string& interfacePath,
                    std::shared_ptr<sdbusplus::asio::connection>& dbusConnection,
@@ -247,6 +247,51 @@ static void
     }
 }
 
+static bool checkPowerState(const SensorData& sensorData,
+                            PowerState& sensorReadState,
+                            const std::string* matchLabel)
+{
+    sensorReadState = PowerState::always;
+
+    if (matchLabel == nullptr)
+    {
+        return false;
+    }
+
+    for (const auto& item : sensorData)
+    {
+        if (item.first.find("PowerStates") == std::string::npos)
+        {
+            continue;
+        }
+
+        auto labelFind = item.second.find("Label");
+        if (labelFind == item.second.end())
+        {
+            continue;
+        }
+        if (std::visit(VariantToStringVisitor(), labelFind->second) !=
+            *matchLabel)
+        {
+            continue;
+        }
+
+        auto findPowerState = item.second.find("PowerState");
+        if (findPowerState == item.second.end())
+        {
+            std::cerr << "failed to find PowerState in configuration\n";
+            return false;
+        }
+
+        std::string powerState =
+            std::visit(VariantToStringVisitor(), findPowerState->second);
+        setReadState(powerState, sensorReadState);
+
+        break;
+    }
+    return true;
+}
+
 static void createSensorsCallback(
     boost::asio::io_service& io, sdbusplus::asio::object_server& objectServer,
     std::shared_ptr<sdbusplus::asio::connection>& dbusConnection,
@@ -288,10 +333,13 @@ static void createSensorsCallback(
         if (std::find(pmbusNames.begin(), pmbusNames.end(), pmbusName) ==
             pmbusNames.end())
         {
-            // To avoid this error message, add your driver name to
-            // the pmbusNames vector at the top of this file.
-            std::cerr << "Driver name " << pmbusName
-                      << " not found in sensor whitelist\n";
+            if constexpr (debug)
+            {
+                // To avoid this error message, add your driver name to
+                // the pmbusNames vector at the top of this file.
+                std::cerr << "Driver name " << pmbusName
+                          << " not found in sensor whitelist\n";
+            }
             continue;
         }
 
@@ -382,9 +430,13 @@ static void createSensorsCallback(
 
             if ((*confBus != bus) || (*confAddr != addr))
             {
-                std::cerr << "Configuration skipping " << *confBus << "-"
-                          << *confAddr << " because not " << bus << "-" << addr
-                          << "\n";
+                if constexpr (debug)
+                {
+                    std::cerr << "Configuration skipping " << *confBus << "-"
+                              << *confAddr << " because not " << bus << "-"
+                              << addr << "\n";
+                }
+
                 continue;
             }
 
@@ -400,9 +452,12 @@ static void createSensorsCallback(
         }
         if (interfacePath == nullptr)
         {
-            // To avoid this error message, add your export map entry,
-            // from Entity Manager, to sensorTypes at the top of this file.
-            std::cerr << "failed to find match for " << deviceName << "\n";
+            if constexpr (debug)
+            {
+                // To avoid this error message, add your export map entry,
+                // from Entity Manager, to sensorTypes at the top of this file.
+                std::cerr << "failed to find match for " << deviceName << "\n";
+            }
             continue;
         }
 
@@ -564,9 +619,6 @@ static void createSensorsCallback(
                           << "\" label=\"" << labelHead << "\"\n";
             }
 
-            checkPWMSensor(sensorPath, labelHead, *interfacePath,
-                           dbusConnection, objectServer, psuNames[0]);
-
             if (!findLabels.empty())
             {
                 /* Check if this labelHead is enabled in config file */
@@ -810,6 +862,13 @@ static void createSensorsCallback(
                     psuNameFromIndex + " " + psuProperty->labelTypeName;
             }
 
+            PowerState sensorReadState;
+            if (!checkPowerState(*sensorData, sensorReadState, &labelHead))
+            {
+                std::cerr << "Failed to find the sensor read power state for "
+                          << sensorNameSubStr << "\n";
+            }
+
             if constexpr (debug)
             {
                 std::cerr << "Sensor name \"" << sensorName << "\" path \""
@@ -822,7 +881,8 @@ static void createSensorsCallback(
                 sensorPathStr, sensorType, objectServer, dbusConnection, io,
                 sensorName, std::move(sensorThresholds), *interfacePath,
                 findSensorUnit->second, factor, psuProperty->maxReading,
-                psuProperty->minReading, labelHead, thresholdConfSize);
+                psuProperty->minReading, labelHead, thresholdConfSize,
+                sensorReadState);
             sensors[sensorName]->setupRead();
             ++numCreated;
             if constexpr (debug)
@@ -830,13 +890,6 @@ static void createSensorsCallback(
                 std::cerr << "Created " << numCreated << " sensors so far\n";
             }
         }
-
-        // OperationalStatus event
-        combineEvents[*psuName + "OperationalStatus"] = nullptr;
-        combineEvents[*psuName + "OperationalStatus"] =
-            std::make_unique<PSUCombineEvent>(
-                objectServer, dbusConnection, io, *psuName, eventPathList,
-                groupEventPathList, "OperationalStatus");
     }
 
     if constexpr (debug)
-- 
2.28.0

