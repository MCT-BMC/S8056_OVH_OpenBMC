From 0c34be57fff530dde4fd05718617d826ee0ed662 Mon Sep 17 00:00:00 2001
From: Wayne Tung <Wayne_Tung@wiwynn.com>
Date: Mon, 19 Aug 2019 08:48:54 +0800
Subject: [PATCH 2/7] Modify pid algorithm and add debug mode

---
 conf.hpp                   |  7 +--
 dbus/dbusconfiguration.cpp | 29 +++---------
 pid/builder.cpp            |  4 +-
 pid/buildjson.cpp          | 40 ++++++-----------
 pid/controller.hpp         |  7 +++
 pid/ec/pid.cpp             | 12 +++--
 pid/ec/pid.hpp             |  3 ++
 pid/ec/stepwise.cpp        | 46 +++++++++++++------
 pid/ec/stepwise.hpp        | 15 +++++--
 pid/fancontroller.cpp      | 16 +++++++
 pid/fancontroller.hpp      |  1 +
 pid/pidcontroller.cpp      | 46 +++++++++----------
 pid/pidcontroller.hpp      | 16 ++++---
 pid/stepwisecontroller.cpp | 34 +++++++++++---
 pid/stepwisecontroller.hpp | 27 +++++++++--
 pid/thermalcontroller.cpp  | 16 ++++---
 pid/util.cpp               |  2 +
 pid/zone.cpp               | 92 ++++++++++++++++++++++++++++++--------
 pid/zone.hpp               | 17 +++++--
 pid/zone_interface.hpp     |  8 +++-
 sysfs/util.cpp             | 16 +++++--
 21 files changed, 302 insertions(+), 152 deletions(-)

diff --git a/conf.hpp b/conf.hpp
index e471f22..89d5df1 100644
--- a/conf.hpp
+++ b/conf.hpp
@@ -37,11 +37,8 @@ struct ControllerInfo
     std::string type;                // fan or margin or temp?
     std::vector<std::string> inputs; // one or more sensors.
     double setpoint;                 // initial setpoint for thermal.
-    union
-    {
-        ec::pidinfo pidInfo; // pid details
-        ec::StepwiseInfo stepwiseInfo;
-    };
+    ec::pidinfo pidInfo;             // pid details
+    ec::StepwiseInfo stepwiseInfo;
 };
 
 /*
diff --git a/dbus/dbusconfiguration.cpp b/dbus/dbusconfiguration.cpp
index 55151d3..61924cc 100644
--- a/dbus/dbusconfiguration.cpp
+++ b/dbus/dbusconfiguration.cpp
@@ -845,37 +845,20 @@ bool init(sdbusplus::bus::bus& bus, boost::asio::steady_timer& timer,
                     info.stepwiseInfo.negativeHysteresis = std::visit(
                         VariantToDoubleVisitor(), findNegHyst->second);
                 }
-                std::vector<double> readings =
+                info.stepwiseInfo.reading =
                     std::get<std::vector<double>>(base.at("Reading"));
-                if (readings.size() > ec::maxStepwisePoints)
-                {
-                    throw std::invalid_argument("Too many stepwise points.");
-                }
-                if (readings.empty())
+                if (info.stepwiseInfo.reading.empty())
                 {
                     throw std::invalid_argument(
                         "Must have one stepwise point.");
                 }
-                std::copy(readings.begin(), readings.end(),
-                          info.stepwiseInfo.reading);
-                if (readings.size() < ec::maxStepwisePoints)
-                {
-                    info.stepwiseInfo.reading[readings.size()] =
-                        std::numeric_limits<double>::quiet_NaN();
-                }
-                std::vector<double> outputs =
+                info.stepwiseInfo.output =
                     std::get<std::vector<double>>(base.at("Output"));
-                if (readings.size() != outputs.size())
+                if (info.stepwiseInfo.reading.size() !=
+                    info.stepwiseInfo.output.size())
                 {
                     throw std::invalid_argument(
-                        "Outputs size must match readings");
-                }
-                std::copy(outputs.begin(), outputs.end(),
-                          info.stepwiseInfo.output);
-                if (outputs.size() < ec::maxStepwisePoints)
-                {
-                    info.stepwiseInfo.output[outputs.size()] =
-                        std::numeric_limits<double>::quiet_NaN();
+                        "Outputs size must match reading");
                 }
             }
         }
diff --git a/pid/builder.cpp b/pid/builder.cpp
index 505ca98..77cafdc 100644
--- a/pid/builder.cpp
+++ b/pid/builder.cpp
@@ -110,7 +110,7 @@ std::unordered_map<int64_t, std::shared_ptr<ZoneInterface>>
 
                 zone->addThermalPID(std::move(pid));
             }
-            else if (info.type == "stepwise")
+            else if ((info.type == "stepwise") || (info.type == "linear"))
             {
                 for (const auto& i : info.inputs)
                 {
@@ -118,7 +118,7 @@ std::unordered_map<int64_t, std::shared_ptr<ZoneInterface>>
                     zone->addThermalInput(i);
                 }
                 auto stepwise = StepwiseController::createStepwiseController(
-                    zone.get(), name, inputs, info.stepwiseInfo);
+                    zone.get(), name, info.type, inputs, info.stepwiseInfo);
                 zone->addThermalPID(std::move(stepwise));
             }
 
diff --git a/pid/buildjson.cpp b/pid/buildjson.cpp
index e078fdb..f2b3993 100644
--- a/pid/buildjson.cpp
+++ b/pid/buildjson.cpp
@@ -34,7 +34,6 @@ void from_json(const json& j, conf::ControllerInfo& c)
 {
     j.at("type").get_to(c.type);
     j.at("inputs").get_to(c.inputs);
-    j.at("setpoint").get_to(c.setpoint);
 
     /* TODO: We need to handle parsing other PID controller configurations.
      * We can do that by checking for different keys and making the decision
@@ -55,11 +54,13 @@ void from_json(const json& j, conf::ControllerInfo& c)
         p.at("negativeHysteresis").get_to(negativeHysteresisValue);
     }
 
-    if (c.type != "stepwise")
+    if ((c.type != "stepwise") && (c.type != "linear"))
     {
+        j.at("setpoint").get_to(c.setpoint);
         p.at("samplePeriod").get_to(c.pidInfo.ts);
         p.at("proportionalCoeff").get_to(c.pidInfo.proportionalCoeff);
         p.at("integralCoeff").get_to(c.pidInfo.integralCoeff);
+        p.at("derivativeCoeff").get_to(c.pidInfo.derivativeCoeff);
         p.at("feedFwdOffsetCoeff").get_to(c.pidInfo.feedFwdOffset);
         p.at("feedFwdGainCoeff").get_to(c.pidInfo.feedFwdGain);
         p.at("integralLimit_min").get_to(c.pidInfo.integralLimit.min);
@@ -77,37 +78,22 @@ void from_json(const json& j, conf::ControllerInfo& c)
         p.at("samplePeriod").get_to(c.stepwiseInfo.ts);
         p.at("isCeiling").get_to(c.stepwiseInfo.isCeiling);
 
-        for (size_t i = 0; i < ec::maxStepwisePoints; i++)
-        {
-            c.stepwiseInfo.reading[i] =
-                std::numeric_limits<double>::quiet_NaN();
-            c.stepwiseInfo.output[i] = std::numeric_limits<double>::quiet_NaN();
-        }
-
         auto reading = p.find("reading");
-        if (reading != p.end())
+        auto output = p.find("output");
+        if ((reading != p.end()) && (output != p.end()))
         {
-            auto r = p.at("reading");
-            for (size_t i = 0; i < ec::maxStepwisePoints; i++)
+            for (size_t i = 0; i < reading->size(); ++i)
             {
-                auto n = r.find(std::to_string(i));
-                if (n != r.end())
+                auto indexStr = std::to_string(i);
+                if ((reading->find(indexStr) != reading->end()) &&
+                    (output->find(indexStr) != output->end()))
                 {
-                    r.at(std::to_string(i)).get_to(c.stepwiseInfo.reading[i]);
+                    c.stepwiseInfo.reading.emplace_back(reading->at(indexStr));
+                    c.stepwiseInfo.output.emplace_back(output->at(indexStr));
                 }
-            }
-        }
-
-        auto output = p.find("output");
-        if (output != p.end())
-        {
-            auto o = p.at("output");
-            for (size_t i = 0; i < ec::maxStepwisePoints; i++)
-            {
-                auto n = o.find(std::to_string(i));
-                if (n != o.end())
+                else
                 {
-                    o.at(std::to_string(i)).get_to(c.stepwiseInfo.output[i]);
+                    break;
                 }
             }
         }
diff --git a/pid/controller.hpp b/pid/controller.hpp
index 5680052..35783b1 100644
--- a/pid/controller.hpp
+++ b/pid/controller.hpp
@@ -25,6 +25,13 @@ struct Controller
     virtual void process(void) = 0;
 
     virtual std::string getID(void) = 0;
+
+    /*
+     * Get the sensor name from zone profile name for example:
+     * Profile name is : Linear_Temp_CPU0.
+     * Return string will be Temp_CPU0.
+     */
+    virtual std::string getProfileName(void) const = 0;
 };
 
 } // namespace pid_control
diff --git a/pid/ec/pid.cpp b/pid/ec/pid.cpp
index 98968f7..dd2ebaf 100644
--- a/pid/ec/pid.cpp
+++ b/pid/ec/pid.cpp
@@ -16,6 +16,8 @@
 
 #include "pid.hpp"
 
+#include <cmath>
+
 namespace pid_control
 {
 namespace ec
@@ -48,6 +50,7 @@ double pid(pid_info_t* pidinfoptr, double input, double setpoint)
 
     double proportionalTerm;
     double integralTerm = 0.0f;
+    double derivativeTerm = 0.0f;
     double feedFwdTerm = 0.0f;
 
     double output;
@@ -55,7 +58,7 @@ double pid(pid_info_t* pidinfoptr, double input, double setpoint)
     // calculate P, I, D, FF
 
     // Pid
-    error = setpoint - input;
+    error = std::abs(setpoint - input);
     proportionalTerm = pidinfoptr->proportionalCoeff * error;
 
     // pId
@@ -67,11 +70,15 @@ double pid(pid_info_t* pidinfoptr, double input, double setpoint)
                              pidinfoptr->integralLimit.max);
     }
 
+    // piD
+    derivativeTerm =
+        pidinfoptr->derivativeCoeff * (input - pidinfoptr->lastInput);
+
     // FF
     feedFwdTerm =
         (setpoint + pidinfoptr->feedFwdOffset) * pidinfoptr->feedFwdGain;
 
-    output = proportionalTerm + integralTerm + feedFwdTerm;
+    output = proportionalTerm + integralTerm + derivativeTerm + feedFwdTerm;
     output = clamp(output, pidinfoptr->outLim.min, pidinfoptr->outLim.max);
 
     // slew rate
@@ -115,7 +122,6 @@ double pid(pid_info_t* pidinfoptr, double input, double setpoint)
                          pidinfoptr->integralLimit.max);
     pidinfoptr->integral = integralTerm;
     pidinfoptr->initialized = true;
-    pidinfoptr->lastOutput = output;
 
     return output;
 }
diff --git a/pid/ec/pid.hpp b/pid/ec/pid.hpp
index 29c7bb3..c76379d 100644
--- a/pid/ec/pid.hpp
+++ b/pid/ec/pid.hpp
@@ -22,10 +22,12 @@ typedef struct
 
     double ts;         // sample time in seconds
     double integral;   // intergal of error
+    double lastInput;  // value of last input
     double lastOutput; // value of last output
 
     double proportionalCoeff; // coeff for P
     double integralCoeff;     // coeff for I
+    double derivativeCoeff;   // coeff for D
     double feedFwdOffset;     // offset coeff for feed-forward term
     double feedFwdGain;       // gain for feed-forward term
 
@@ -45,6 +47,7 @@ struct pidinfo
     double ts;                  // sample time in seconds
     double proportionalCoeff;   // coeff for P
     double integralCoeff;       // coeff for I
+    double derivativeCoeff;     // coeff for D
     double feedFwdOffset;       // offset coeff for feed-forward term
     double feedFwdGain;         // gain for feed-forward term
     ec::limits_t integralLimit; // clamp of integral
diff --git a/pid/ec/stepwise.cpp b/pid/ec/stepwise.cpp
index 0065228..f03f515 100644
--- a/pid/ec/stepwise.cpp
+++ b/pid/ec/stepwise.cpp
@@ -24,28 +24,46 @@ namespace pid_control
 {
 namespace ec
 {
-
-double stepwise(const ec::StepwiseInfo& info, double input)
+double stepwise(const std::vector<double>& reading,
+                const std::vector<double>& output, double input)
 {
-    double value = info.output[0]; // if we are below the lowest
-                                   // point, we set the lowest value
-
-    for (size_t ii = 1; ii < ec::maxStepwisePoints; ii++)
+    for (size_t i = reading.size() - 1; i >= 0; --i)
     {
-
-        if (std::isnan(info.reading[ii]))
+        if (input >= reading[i])
         {
-            break;
+            return output[i];
         }
-        if (info.reading[ii] > input)
+    }
+
+    return output.front();
+}
+
+double linear(const std::vector<double>& reading,
+              const std::vector<double>& output, double input)
+{
+    if (input >= reading.back())
+    {
+        return output.back();
+    }
+    else if (input > reading.front())
+    {
+        for (size_t i = 1; i < reading.size(); ++i)
         {
-            break;
+            // Interpolation
+            if (reading[i] > input)
+            {
+                double inputLow = reading[i - 1];
+                double inputHigh = reading[i];
+                double outputLow = output[i - 1];
+                double outputHigh = output[i];
+                return outputLow +
+                       ((outputHigh - outputLow) / (inputHigh - inputLow)) *
+                           (input - inputLow);
+            }
         }
-        value = info.output[ii];
     }
 
-    return value;
+    return output.front();
 }
-
 } // namespace ec
 } // namespace pid_control
diff --git a/pid/ec/stepwise.hpp b/pid/ec/stepwise.hpp
index 88db332..2f3d546 100644
--- a/pid/ec/stepwise.hpp
+++ b/pid/ec/stepwise.hpp
@@ -24,19 +24,26 @@ namespace pid_control
 {
 namespace ec
 {
-constexpr size_t maxStepwisePoints = 20;
 
 struct StepwiseInfo
 {
     double ts; // sample time in seconds
-    double reading[maxStepwisePoints];
-    double output[maxStepwisePoints];
+    std::vector<double> reading;
+    std::vector<double> output;
     double positiveHysteresis;
     double negativeHysteresis;
     bool isCeiling;
 };
 
-double stepwise(const ec::StepwiseInfo& info, double value);
+/** If input is smaller than the minimum reading point,
+ *  return the minimum value of output.
+ *  If input is larger than the max reading point,
+ *  return the maximum value of output.
+ */
+double stepwise(const std::vector<double>& reading,
+                const std::vector<double>& output, double input);
+double linear(const std::vector<double>& reading,
+              const std::vector<double>& output, double input);
 
 } // namespace ec
 } // namespace pid_control
diff --git a/pid/fancontroller.cpp b/pid/fancontroller.cpp
index d3c58ca..8e49c5f 100644
--- a/pid/fancontroller.cpp
+++ b/pid/fancontroller.cpp
@@ -135,6 +135,22 @@ void FanController::outputProc(double value)
             {
                 percent = _owner->getFailSafePercent();
             }
+
+            if (failSafePrint || _owner->getDebugMode())
+            {
+                std::cerr << "Zone " << _owner->getZoneID()
+                          << " fans output failsafe pwm: " << percent << "\n";
+                failSafePrint = false;
+            }
+        }
+        else
+        {
+            failSafePrint = true;
+            if (_owner->getDebugMode())
+            {
+                std::cerr << "Zone " << _owner->getZoneID()
+                          << " fans output pwm: " << percent << "\n";
+            }
         }
     }
 
diff --git a/pid/fancontroller.hpp b/pid/fancontroller.hpp
index 25eebad..bb01053 100644
--- a/pid/fancontroller.hpp
+++ b/pid/fancontroller.hpp
@@ -47,6 +47,7 @@ class FanController : public PIDController
   private:
     std::vector<std::string> _inputs;
     FanSpeedDirection _direction;
+    bool failSafePrint = true;
 };
 
 } // namespace pid_control
diff --git a/pid/pidcontroller.cpp b/pid/pidcontroller.cpp
index e7a4ad1..fea95b1 100644
--- a/pid/pidcontroller.cpp
+++ b/pid/pidcontroller.cpp
@@ -42,40 +42,36 @@ void PIDController::process(void)
     // Get input value
     input = inputProc();
 
+    // No valid input just skip it.
+    if ((input == std::numeric_limits<double>::lowest()) ||
+        (input == std::numeric_limits<double>::max()))
+    {
+        return;
+    }
+
     auto info = getPIDInfo();
 
-    // if no hysteresis, maintain previous behavior
-    if (info->positiveHysteresis == 0 && info->negativeHysteresis == 0)
+    // over the hysteresis bounds, keep counting pid
+    if (input > (setpt + info->positiveHysteresis))
     {
-        // Calculate new output
         output = ec::pid(info, input, setpt);
-
-        // this variable isn't actually used in this context, but we're setting
-        // it here incase somebody uses it later it's the correct value
-        lastInput = input;
+        info->lastInput = input;
     }
+    // under the hysteresis bounds, initialize pid
+    else if (input < (setpt - info->negativeHysteresis))
+    {
+        info->lastInput = setpt;
+        info->integral = 0;
+        output = 0;
+    }
+    // inside the hysteresis bounds, keep last output
     else
     {
-        // initialize if not set yet
-        if (std::isnan(lastInput))
-        {
-            lastInput = input;
-        }
-
-        // if reading is outside of hysteresis bounds, use it for reading,
-        // otherwise use last reading without updating it first
-        else if ((input - lastInput) > info->positiveHysteresis)
-        {
-            lastInput = input;
-        }
-        else if ((lastInput - input) > info->negativeHysteresis)
-        {
-            lastInput = input;
-        }
-
-        output = ec::pid(info, lastInput, setpt);
+        output = info->lastOutput;
     }
 
+    info->lastOutput = output;
+
     // Output new value
     outputProc(output);
 
diff --git a/pid/pidcontroller.hpp b/pid/pidcontroller.hpp
index cb92377..0b43d40 100644
--- a/pid/pidcontroller.hpp
+++ b/pid/pidcontroller.hpp
@@ -21,7 +21,8 @@ class PIDController : public Controller
 {
   public:
     PIDController(const std::string& id, ZoneInterface* owner) :
-        Controller(), _owner(owner), _setpoint(0), _id(id)
+        Controller(), _owner(owner), _setpoint(0), _id(id),
+        _profileName(id.substr(id.find("_") + 1))
     {}
 
     virtual ~PIDController()
@@ -37,6 +38,12 @@ class PIDController : public Controller
     {
         return _id;
     }
+
+    std::string getProfileName(void) const override
+    {
+        return _profileName;
+    }
+
     double getSetpoint(void)
     {
         return _setpoint;
@@ -51,11 +58,6 @@ class PIDController : public Controller
         return &_pid_info;
     }
 
-    double getLastInput(void)
-    {
-        return lastInput;
-    }
-
   protected:
     ZoneInterface* _owner;
 
@@ -64,7 +66,7 @@ class PIDController : public Controller
     ec::pid_info_t _pid_info;
     double _setpoint;
     std::string _id;
-    double lastInput = std::numeric_limits<double>::quiet_NaN();
+    std::string _profileName;
 };
 
 } // namespace pid_control
diff --git a/pid/stepwisecontroller.cpp b/pid/stepwisecontroller.cpp
index c8ec219..4d6d028 100644
--- a/pid/stepwisecontroller.cpp
+++ b/pid/stepwisecontroller.cpp
@@ -45,17 +45,17 @@ void StepwiseController::process(void)
     // Calculate new output if hysteresis allows
     if (std::isnan(output))
     {
-        output = ec::stepwise(info, input);
+        output = algorithmFunc(info.reading, info.output, input);
         lastInput = input;
     }
     else if ((input - lastInput) > info.positiveHysteresis)
     {
-        output = ec::stepwise(info, input);
+        output = algorithmFunc(info.reading, info.output, input);
         lastInput = input;
     }
     else if ((lastInput - input) > info.negativeHysteresis)
     {
-        output = ec::stepwise(info, input);
+        output = algorithmFunc(info.reading, info.output, input);
         lastInput = input;
     }
 
@@ -67,7 +67,7 @@ void StepwiseController::process(void)
 }
 
 std::unique_ptr<Controller> StepwiseController::createStepwiseController(
-    ZoneInterface* owner, const std::string& id,
+    ZoneInterface* owner, const std::string& id, const std::string& type,
     const std::vector<std::string>& inputs, const ec::StepwiseInfo& initial)
 {
     // StepwiseController requires at least 1 input
@@ -77,7 +77,8 @@ std::unique_ptr<Controller> StepwiseController::createStepwiseController(
         return nullptr;
     }
 
-    auto thermal = std::make_unique<StepwiseController>(id, inputs, owner);
+    auto thermal =
+        std::make_unique<StepwiseController>(id, type, inputs, owner);
     thermal->setStepwiseInfo(initial);
 
     return thermal;
@@ -88,8 +89,23 @@ double StepwiseController::inputProc(void)
     double value = std::numeric_limits<double>::lowest();
     for (const auto& in : _inputs)
     {
-        value = std::max(value, _owner->getCachedValue(in));
+        double cachedValue = _owner->getCachedValue(in);
+
+        // Less than 0 is perfectly OK for temperature, but must not be NAN
+        if (!(std::isfinite(cachedValue)))
+        {
+            continue;
+        }
+
+        value = std::max(value, cachedValue);
+    }
+
+    if (_owner->getDebugMode())
+    {
+        std::cerr << getID()
+                  << " choose the maximum temperature value: " << value << "\n";
     }
+
     return value;
 }
 
@@ -101,7 +117,11 @@ void StepwiseController::outputProc(double value)
     }
     else
     {
-        _owner->addSetPoint(value);
+        _owner->addSetPoint(getProfileName(), value);
+        if (_owner->getDebugMode())
+        {
+            std::cerr << getID() << " stepwise output pwm: " << value << "\n";
+        }
     }
     return;
 }
diff --git a/pid/stepwisecontroller.hpp b/pid/stepwisecontroller.hpp
index a3b3965..a2bd3cb 100644
--- a/pid/stepwisecontroller.hpp
+++ b/pid/stepwisecontroller.hpp
@@ -4,6 +4,7 @@
 #include "ec/stepwise.hpp"
 #include "fan.hpp"
 
+#include <functional>
 #include <limits>
 #include <memory>
 #include <vector>
@@ -18,15 +19,26 @@ class StepwiseController : public Controller
   public:
     static std::unique_ptr<Controller>
         createStepwiseController(ZoneInterface* owner, const std::string& id,
+                                 const std::string& type,
                                  const std::vector<std::string>& inputs,
                                  const ec::StepwiseInfo& initial);
 
-    StepwiseController(const std::string& id,
+    StepwiseController(const std::string& id, const std::string& type,
                        const std::vector<std::string>& inputs,
                        ZoneInterface* owner) :
         Controller(),
-        _owner(owner), _id(id), _inputs(inputs)
-    {}
+        _owner(owner), _id(id), _inputs(inputs),
+        _profileName(id.substr(id.find("_") + 1))
+    {
+        if (type == "stepwise")
+        {
+            algorithmFunc = ec::stepwise;
+        }
+        else if (type == "linear")
+        {
+            algorithmFunc = ec::linear;
+        }
+    }
 
     double inputProc(void) override;
 
@@ -39,6 +51,11 @@ class StepwiseController : public Controller
         return _id;
     }
 
+    std::string getProfileName(void) const override
+    {
+        return _profileName;
+    }
+
     ec::StepwiseInfo& getStepwiseInfo(void)
     {
         return _stepwise_info;
@@ -57,6 +74,10 @@ class StepwiseController : public Controller
     ec::StepwiseInfo _stepwise_info;
     std::string _id;
     std::vector<std::string> _inputs;
+    std::string _profileName;
+    std::function<double(const std::vector<double>&, const std::vector<double>&,
+                         double)>
+        algorithmFunc;
     double lastInput = std::numeric_limits<double>::quiet_NaN();
     double lastOutput = std::numeric_limits<double>::quiet_NaN();
 };
diff --git a/pid/thermalcontroller.cpp b/pid/thermalcontroller.cpp
index 8125349..b7e970b 100644
--- a/pid/thermalcontroller.cpp
+++ b/pid/thermalcontroller.cpp
@@ -57,6 +57,8 @@ std::unique_ptr<PIDController> ThermalController::createThermalPid(
     thermal->setSetpoint(setpoint);
 
     initializePIDStruct(info, initial);
+    info->lastInput = setpoint;
+    info->lastOutput = owner->getFailSafePercent();
 
     return thermal;
 }
@@ -77,7 +79,6 @@ double ThermalController::inputProc(void)
         compare = std::max<double>;
     }
 
-    bool acceptable = false;
     for (const auto& in : _inputs)
     {
         double cachedValue = _owner->getCachedValue(in);
@@ -89,13 +90,12 @@ double ThermalController::inputProc(void)
         }
 
         value = compare(value, cachedValue);
-        acceptable = true;
     }
 
-    if (!acceptable)
+    if (_owner->getDebugMode())
     {
-        // While not optimal, zero is better than garbage
-        value = 0;
+        std::cerr << getID() << " choose the temperature value: " << value
+                  << "\n";
     }
 
     return value;
@@ -123,7 +123,11 @@ double ThermalController::setptProc(void)
 // bmc_set_pid_output
 void ThermalController::outputProc(double value)
 {
-    _owner->addSetPoint(value);
+    _owner->addSetPoint(getProfileName(), value);
+    if (_owner->getDebugMode())
+    {
+        std::cerr << getID() << " pid output pwm: " << value << "\n";
+    }
 
     return;
 }
diff --git a/pid/util.cpp b/pid/util.cpp
index ad7c139..5b7cd5f 100644
--- a/pid/util.cpp
+++ b/pid/util.cpp
@@ -31,6 +31,7 @@ void initializePIDStruct(ec::pid_info_t* info, const ec::pidinfo& initial)
     info->ts = initial.ts;
     info->proportionalCoeff = initial.proportionalCoeff;
     info->integralCoeff = initial.integralCoeff;
+    info->derivativeCoeff = initial.derivativeCoeff;
     info->feedFwdOffset = initial.feedFwdOffset;
     info->feedFwdGain = initial.feedFwdGain;
     info->integralLimit.min = initial.integralLimit.min;
@@ -48,6 +49,7 @@ void dumpPIDStruct(ec::pid_info_t* info)
     std::cerr << " ts: " << info->ts
               << " proportionalCoeff: " << info->proportionalCoeff
               << " integralCoeff: " << info->integralCoeff
+              << " derivativeCoeff: " << info->derivativeCoeff
               << " feedFwdOffset: " << info->feedFwdOffset
               << " feedFwdGain: " << info->feedFwdGain
               << " integralLimit.min: " << info->integralLimit.min
diff --git a/pid/zone.cpp b/pid/zone.cpp
index 441031a..3c14fad 100644
--- a/pid/zone.cpp
+++ b/pid/zone.cpp
@@ -90,14 +90,24 @@ bool DbusPidZone::getFailSafeMode(void) const
     return !_failSafeSensors.empty();
 }
 
+bool DbusPidZone::getDebugMode(void) const
+{
+    return _debugMode;
+}
+
+void DbusPidZone::setDebugMode(bool mode)
+{
+    _debugMode = mode;
+}
+
 int64_t DbusPidZone::getZoneID(void) const
 {
     return _zoneId;
 }
 
-void DbusPidZone::addSetPoint(double setpoint)
+void DbusPidZone::addSetPoint(std::string profileName, double setpoint)
 {
-    _SetPoints.push_back(setpoint);
+    _SetPoints[profileName] += setpoint;
 }
 
 void DbusPidZone::addRPMCeiling(double ceiling)
@@ -147,7 +157,7 @@ void DbusPidZone::addFanInput(const std::string& fan)
 
 void DbusPidZone::addThermalInput(const std::string& therm)
 {
-    _thermalInputs.push_back(therm);
+    _thermalInputs.insert(therm);
 }
 
 // Updates desired RPM setpoint from optional text file
@@ -205,18 +215,28 @@ static bool fileParseRpm(const std::string& fileName, double& rpmValue)
 void DbusPidZone::determineMaxSetPointRequest(void)
 {
     double max = 0;
-    std::vector<double>::iterator result;
 
     if (_SetPoints.size() > 0)
     {
-        result = std::max_element(_SetPoints.begin(), _SetPoints.end());
-        max = *result;
+        for (const auto& [key, value] : _SetPoints)
+        {
+            if (getDebugMode())
+            {
+                std::cerr << key << " total output pwm: " << value << "\n";
+            }
+
+            if (value > max)
+            {
+                max = value;
+            }
+        }
     }
 
     if (_RPMCeilings.size() > 0)
     {
+        std::vector<double>::iterator result;
         result = std::min_element(_RPMCeilings.begin(), _RPMCeilings.end());
-        max = std::min(max, *result);
+        max = *result;
     }
 
     /*
@@ -308,6 +328,10 @@ void DbusPidZone::updateFanTelemetry(void)
     {
         auto sensor = _mgr.getSensor(f);
         ReadReturn r = sensor->read();
+        if (getDebugMode())
+        {
+            std::cerr << f << " fan sensor reading: " << r.value << "\n";
+        }
         _cachedValuesByName[f] = r.value;
         int64_t timeout = sensor->getTimeout();
         tstamp then = r.updated;
@@ -327,21 +351,32 @@ void DbusPidZone::updateFanTelemetry(void)
         }
 
         // check if fan fail.
+        auto findFailSafeSensor = _failSafeSensors.find(f);
         if (sensor->getFailed())
         {
-            _failSafeSensors.insert(f);
+            if ((findFailSafeSensor == _failSafeSensors.end()) ||
+                getDebugMode())
+            {
+                std::cerr << f << " fan sensor get failed\n";
+                _failSafeSensors.insert(f);
+            }
         }
         else if (timeout != 0 && duration >= period)
         {
-            _failSafeSensors.insert(f);
+            if ((findFailSafeSensor == _failSafeSensors.end()) ||
+                getDebugMode())
+            {
+                std::cerr << f << " fan sensor timeout\n";
+                _failSafeSensors.insert(f);
+            }
         }
         else
         {
             // Check if it's in there: remove it.
-            auto kt = _failSafeSensors.find(f);
-            if (kt != _failSafeSensors.end())
+            if (findFailSafeSensor != _failSafeSensors.end())
             {
-                _failSafeSensors.erase(kt);
+                std::cerr << f << " is erased from failsafe sensor set\n";
+                _failSafeSensors.erase(findFailSafeSensor);
             }
         }
     }
@@ -367,6 +402,11 @@ void DbusPidZone::updateSensors(void)
     {
         auto sensor = _mgr.getSensor(t);
         ReadReturn r = sensor->read();
+        if (getDebugMode())
+        {
+            std::cerr << t << " temperature sensor reading: " << r.value
+                      << "\n";
+        }
         int64_t timeout = sensor->getTimeout();
 
         _cachedValuesByName[t] = r.value;
@@ -375,22 +415,32 @@ void DbusPidZone::updateSensors(void)
         auto duration = duration_cast<std::chrono::seconds>(now - then).count();
         auto period = std::chrono::seconds(timeout).count();
 
+        auto findFailSafeSensor = _failSafeSensors.find(t);
         if (sensor->getFailed())
         {
-            _failSafeSensors.insert(t);
+            if ((findFailSafeSensor == _failSafeSensors.end()) ||
+                getDebugMode())
+            {
+                std::cerr << t << " temperature sensor getfailed\n";
+                _failSafeSensors.insert(t);
+            }
         }
         else if (timeout != 0 && duration >= period)
         {
-            // std::cerr << "Entering fail safe mode.\n";
-            _failSafeSensors.insert(t);
+            if ((findFailSafeSensor == _failSafeSensors.end()) ||
+                getDebugMode())
+            {
+                std::cerr << t << " temperature sensor timeout\n";
+                _failSafeSensors.insert(t);
+            }
         }
         else
         {
             // Check if it's in there: remove it.
-            auto kt = _failSafeSensors.find(t);
-            if (kt != _failSafeSensors.end())
+            if (findFailSafeSensor != _failSafeSensors.end())
             {
-                _failSafeSensors.erase(kt);
+                std::cerr << t << " is erased from failsafe sensor set\n";
+                _failSafeSensors.erase(findFailSafeSensor);
             }
         }
     }
@@ -459,4 +509,10 @@ bool DbusPidZone::failSafe() const
     return getFailSafeMode();
 }
 
+bool DbusPidZone::debug(bool value)
+{
+    setDebugMode(value);
+    return ModeObject::debug(value);
+}
+
 } // namespace pid_control
diff --git a/pid/zone.hpp b/pid/zone.hpp
index 3bea9c2..0ec476e 100644
--- a/pid/zone.hpp
+++ b/pid/zone.hpp
@@ -55,9 +55,11 @@ class DbusPidZone : public ZoneInterface, public ModeObject
      */
     void setManualMode(bool mode);
     bool getFailSafeMode(void) const override;
+    bool getDebugMode(void) const override;
+    void setDebugMode(bool mode);
 
-    int64_t getZoneID(void) const;
-    void addSetPoint(double setpoint) override;
+    int64_t getZoneID(void) const override;
+    void addSetPoint(std::string profileName, double setpoint) override;
     double getMaxSetPointRequest(void) const override;
     void addRPMCeiling(double ceiling) override;
     void clearSetPoints(void) override;
@@ -87,6 +89,8 @@ class DbusPidZone : public ZoneInterface, public ModeObject
     bool manual(bool value) override;
     /* Method for reading whether in fail-safe mode over dbus */
     bool failSafe() const override;
+    /* Method for setting the debug mode over dbus */
+    bool debug(bool value) override;
 
   private:
     std::ofstream _log;
@@ -94,15 +98,20 @@ class DbusPidZone : public ZoneInterface, public ModeObject
     const int64_t _zoneId;
     double _maximumSetPoint = 0;
     bool _manualMode = false;
+    bool _debugMode = false;
     const double _minThermalOutputSetPt;
     const double _failSafePercent;
 
     std::set<std::string> _failSafeSensors;
 
-    std::vector<double> _SetPoints;
+    std::map<std::string, double> _SetPoints;
     std::vector<double> _RPMCeilings;
     std::vector<std::string> _fanInputs;
-    std::vector<std::string> _thermalInputs;
+    /*
+     * One sensor may has stepwise/linear and PID at the same time.
+     * To avoid duplicated sensor name, use "set" replace with "vector".
+     */
+    std::set<std::string> _thermalInputs;
     std::map<std::string, double> _cachedValuesByName;
     const SensorManager& _mgr;
 
diff --git a/pid/zone_interface.hpp b/pid/zone_interface.hpp
index a024c0e..0b98757 100644
--- a/pid/zone_interface.hpp
+++ b/pid/zone_interface.hpp
@@ -16,6 +16,9 @@ class ZoneInterface
   public:
     virtual ~ZoneInterface() = default;
 
+    /** Get Current Zone ID */
+    virtual int64_t getZoneID(void) const = 0;
+
     /** If the zone implementation supports logging, initialize the log. */
     virtual void initializeLog(void) = 0;
     /** If the zone implementation supports logging, write string to log. */
@@ -45,7 +48,7 @@ class ZoneInterface
     virtual double getCachedValue(const std::string& name) = 0;
 
     /** Add a set point value for the Max Set Point computation. */
-    virtual void addSetPoint(double setpoint) = 0;
+    virtual void addSetPoint(std::string profileName, double setpoint) = 0;
     /** Clear all set points specified via addSetPoint */
     virtual void clearSetPoints(void) = 0;
 
@@ -76,6 +79,9 @@ class ZoneInterface
      */
     virtual bool getManualMode(void) const = 0;
 
+    /** Return if the zone is set to debug mode. */
+    virtual bool getDebugMode(void) const = 0;
+
     /** For each fan pid, do processing. */
     virtual void processFans(void) = 0;
     /** For each thermal pid, do processing. */
diff --git a/sysfs/util.cpp b/sysfs/util.cpp
index b7cc6f3..69a438e 100644
--- a/sysfs/util.cpp
+++ b/sysfs/util.cpp
@@ -16,6 +16,7 @@
 
 #include "util.hpp"
 
+#include <array>
 #include <filesystem>
 #include <iostream>
 #include <string>
@@ -24,16 +25,18 @@ namespace pid_control
 {
 
 /*
- * There are two basic paths I want to support:
+ * There are three basic paths I want to support:
  * 1. /sys/class/hwmon/hwmon0/pwm1
  * 2. /sys/devices/platform/ahb/1e786000.pwm-tacho-controller/hwmon/<asterisk
  * asterisk>/pwm1
+ * 3. /sys/bus/i2c/devices/1-0020/hwmon/<asterisk asterisk>/pwm1
  *
  * In this latter case, I want to fill in that gap.  Assuming because it's this
  * path that it'll only have one directory there.
  */
 
-static constexpr auto platform = "/sys/devices/platform/";
+static const std::array<std::string, 2> supportedPath = {
+    "/sys/devices/platform/", "/sys/bus/i2c/devices/"};
 namespace fs = std::filesystem;
 
 std::string FixupPath(std::string original)
@@ -42,7 +45,14 @@ std::string FixupPath(std::string original)
 
     /* TODO: Consider the merits of using regex for this. */
     n = original.find("**");
-    x = original.find(platform);
+    for (auto& path : supportedPath)
+    {
+        x = original.find(path);
+        if (x != std::string::npos)
+        {
+            break;
+        }
+    }
 
     if ((n != std::string::npos) && (x != std::string::npos))
     {
-- 
2.28.0

