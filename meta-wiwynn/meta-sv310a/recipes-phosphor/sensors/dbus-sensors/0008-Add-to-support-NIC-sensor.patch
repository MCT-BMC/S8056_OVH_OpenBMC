From 08c163e8c55df19870a1efdc884aaa60e78ef501 Mon Sep 17 00:00:00 2001
From: Eli Huang <Eli_Huang@wiwynn.com>
Date: Wed, 28 Oct 2020 09:18:40 +0800
Subject: [PATCH] Add to support NIC sensor

Description:
- Add new deamon to support NIC sensor and using i2c lib to
  get sensor value.

Design:
- Add daemon to support NIC sensor.
- Read the NIC register value with i2c lib.
---
 include/NICSensor.hpp                         |  46 +++
 meson_options.txt                             |   1 +
 service_files/meson.build                     |   1 +
 .../xyz.openbmc_project.nicsensor.service     |  14 +
 src/NICSensor.cpp                             | 191 ++++++++++++
 src/NICSensorMain.cpp                         | 292 ++++++++++++++++++
 src/meson.build                               |  20 ++
 7 files changed, 565 insertions(+)
 create mode 100644 include/NICSensor.hpp
 create mode 100644 service_files/xyz.openbmc_project.nicsensor.service
 create mode 100644 src/NICSensor.cpp
 create mode 100644 src/NICSensorMain.cpp

diff --git a/include/NICSensor.hpp b/include/NICSensor.hpp
new file mode 100644
index 0000000..10aad18
--- /dev/null
+++ b/include/NICSensor.hpp
@@ -0,0 +1,46 @@
+#pragma once
+
+#include <Thresholds.hpp>
+#include <boost/asio/steady_timer.hpp>
+#include <sdbusplus/asio/object_server.hpp>
+#include <sensor.hpp>
+
+enum class ReadMode
+{
+    READ_BYTE = 0
+};
+
+class NICSensor : public Sensor, public std::enable_shared_from_this<NICSensor>
+{
+  public:
+    NICSensor(const std::string& path, const std::string& objectType,
+              sdbusplus::asio::object_server& objectServer,
+              std::shared_ptr<sdbusplus::asio::connection>& conn,
+              boost::asio::io_service& io, const std::string& sensorName,
+              std::vector<thresholds::Threshold>&& thresholds,
+              const std::string& sensorConfiguration,
+              const std::string& sensorTypeName, const double maxValue,
+              const double minValue, const PowerState readState,
+              const uint8_t busId, const uint8_t slaveAddr,
+              const uint8_t cmdCode, const ReadMode readMode,
+              const double scaleVal, const double offsetVal,
+              const std::optional<double>& tctlMax);
+    ~NICSensor();
+    void setupRead(void);
+
+  private:
+    sdbusplus::asio::object_server& objServer;
+    boost::asio::steady_timer waitTimer;
+    std::string path;
+    uint8_t busId;
+    uint8_t slaveAddr;
+    uint8_t cmdCode;
+    ReadMode readMode;
+    double senValue;
+    double scaleVal;
+    double offsetVal;
+    thresholds::ThresholdTimer thresholdTimer;
+    bool visitNICReg(void);
+    void handleResponse(void);
+    void checkThresholds(void) override;
+};
diff --git a/meson_options.txt b/meson_options.txt
index cf093bf..e387374 100644
--- a/meson_options.txt
+++ b/meson_options.txt
@@ -6,6 +6,7 @@ option('hwmon-temp', type: 'feature', value: 'enabled', description: 'Enable HWM
 option('intrusion', type: 'feature', value: 'enabled', description: 'Enable intrusion sensor.',)
 option('ipmb', type: 'feature', value: 'enabled', description: 'Enable IPMB sensor.',)
 option('mcu', type: 'feature', value: 'enabled', description: 'Enable MCU sensor.',)
+option('nic', type: 'feature', value: 'enabled', description: 'Enable NIC sensor.',)
 option('nvme', type: 'feature', value: 'disabled', description: 'Enable NVMe sensor.',)
 option('nvme-i2c', type: 'feature', value: 'disabled', description: 'Enable NVME sensor.',)
 option('psu', type: 'feature', value: 'enabled', description: 'Enable PSU sensor.',)
diff --git a/service_files/meson.build b/service_files/meson.build
index ea4b0e8..267e445 100644
--- a/service_files/meson.build
+++ b/service_files/meson.build
@@ -7,6 +7,7 @@ unit_files = [
     ['ipmb', 'xyz.openbmc_project.ipmbsensor.service'],
     ['intrusion', 'xyz.openbmc_project.intrusionsensor.service'],
     ['mcu', 'xyz.openbmc_project.mcutempsensor.service'],
+    ['nic', 'xyz.openbmc_project.nicsensor.service'],
     ['nvme', 'xyz.openbmc_project.nvmesensor.service'],
     ['nvme-i2c', 'xyz.openbmc_project.nvmesensor.service'],
     ['psu', 'xyz.openbmc_project.psusensor.service'],
diff --git a/service_files/xyz.openbmc_project.nicsensor.service b/service_files/xyz.openbmc_project.nicsensor.service
new file mode 100644
index 0000000..25b6baf
--- /dev/null
+++ b/service_files/xyz.openbmc_project.nicsensor.service
@@ -0,0 +1,14 @@
+[Unit]
+Description=NIC card Sensor
+StopWhenUnneeded=false
+After=xyz.openbmc_project.EntityManager.service
+Wants=mapper-wait@-xyz-openbmc_project-inventory-done.service
+After=mapper-wait@-xyz-openbmc_project-inventory-done.service
+
+[Service]
+Restart=always
+RestartSec=5
+ExecStart=/usr/bin/nicsensor
+
+[Install]
+WantedBy=multi-user.target
diff --git a/src/NICSensor.cpp b/src/NICSensor.cpp
new file mode 100644
index 0000000..f07c003
--- /dev/null
+++ b/src/NICSensor.cpp
@@ -0,0 +1,191 @@
+#include "Utils.hpp"
+
+#include <openbmc/libobmci2c.h>
+#include <unistd.h>
+
+#include <NICSensor.hpp>
+#include <boost/algorithm/string/predicate.hpp>
+#include <boost/algorithm/string/replace.hpp>
+#include <sdbusplus/asio/connection.hpp>
+#include <sdbusplus/asio/object_server.hpp>
+
+#include <iostream>
+#include <limits>
+#include <string>
+
+static constexpr bool DEBUG = false;
+
+static constexpr const char* sensorPathPrefix = "/xyz/openbmc_project/sensors/";
+
+static constexpr unsigned int sensorPollMs = 1000;
+static constexpr unsigned int sensorScaleFactor = 1000;
+
+NICSensor::NICSensor(const std::string& path, const std::string& objectType,
+                     sdbusplus::asio::object_server& objectServer,
+                     std::shared_ptr<sdbusplus::asio::connection>& conn,
+                     boost::asio::io_service& io, const std::string& sensorName,
+                     std::vector<thresholds::Threshold>&& _thresholds,
+                     const std::string& sensorConfiguration,
+                     const std::string& sensorTypeName, const double maxValue,
+                     const double minValue, const PowerState readState,
+                     const uint8_t busId, const uint8_t slaveAddr,
+                     const uint8_t cmdCode, const ReadMode readMode,
+                     const double scaleVal, const double offsetVal,
+                     const std::optional<double>& tctlMax) :
+    Sensor(boost::replace_all_copy(sensorName, " ", "_"),
+           std::move(_thresholds), sensorConfiguration, objectType, false,
+           maxValue, minValue, conn, readState),
+    objServer(objectServer), waitTimer(io), path(path), busId(busId),
+    slaveAddr(slaveAddr), cmdCode(cmdCode), readMode(readMode),
+    scaleVal(scaleVal), offsetVal(offsetVal), thresholdTimer(io, this)
+{
+    std::string dbusPath = sensorPathPrefix + sensorTypeName + name;
+
+    sensorInterface = objectServer.add_interface(
+        dbusPath, "xyz.openbmc_project.Sensor.Value");
+    if (tctlMax.has_value())
+    {
+        sensorInterface->register_property("TctlMax", tctlMax.value());
+    }
+
+    if (thresholds::hasWarningInterface(thresholds))
+    {
+        thresholdInterfaceWarning = objectServer.add_interface(
+            dbusPath, "xyz.openbmc_project.Sensor.Threshold.Warning");
+    }
+    if (thresholds::hasCriticalInterface(thresholds))
+    {
+        thresholdInterfaceCritical = objectServer.add_interface(
+            dbusPath, "xyz.openbmc_project.Sensor.Threshold.Critical");
+    }
+    association = objectServer.add_interface(dbusPath, association::interface);
+
+    setInitialProperties(conn, sensor_paths::unitDegreesC);
+}
+
+NICSensor::~NICSensor()
+{
+    // close the Timer to cancel async operations
+    waitTimer.cancel();
+    objServer.remove_interface(thresholdInterfaceWarning);
+    objServer.remove_interface(thresholdInterfaceCritical);
+    objServer.remove_interface(sensorInterface);
+    objServer.remove_interface(association);
+}
+
+void NICSensor::setupRead(void)
+{
+    std::weak_ptr<NICSensor> weakRef = weak_from_this();
+
+    bool res = visitNICReg();
+    if (res != true)
+    {
+        incrementError();
+    }
+    else
+    {
+        handleResponse();
+    }
+
+    waitTimer.expires_from_now(std::chrono::milliseconds(sensorPollMs));
+    waitTimer.async_wait([weakRef](const boost::system::error_code& ec) {
+        std::shared_ptr<NICSensor> self = weakRef.lock();
+        if (ec == boost::asio::error::operation_aborted)
+        {
+            if (self)
+            {
+                std::cerr << "NICSensor " << self->name << " read cancelled\n";
+            }
+            else
+            {
+                std::cerr << "NICSensor read cancelled no self\n";
+            }
+            return; // we're being canceled
+        }
+
+        if (self)
+        {
+            self->setupRead();
+        }
+        else
+        {
+            std::cerr << "NICSensor weakref no self\n";
+        }
+    });
+}
+bool NICSensor::visitNICReg(void)
+{
+    int fd = -1;
+    int res = -1;
+    std::vector<char> filename;
+    filename.assign(20, 0);
+
+    if (!readingStateGood())
+    {
+        markAvailable(false);
+        return true;
+    }
+
+    fd = open_i2c_dev(busId, filename.data(), filename.size(), 0);
+    if (fd < 0)
+    {
+        std::cerr << "Fail to open I2C device: " << path << "\n";
+        return false;
+    }
+    std::vector<uint8_t> cmdData;
+    cmdData.assign(1, cmdCode);
+    std::vector<uint8_t> readBuf;
+    int8_t raw_value;
+    switch (readMode)
+    {
+        case ReadMode::READ_BYTE:
+            readBuf.assign(1, 0x0);
+            res = i2c_master_write_read(fd, slaveAddr, cmdData.size(),
+                                        cmdData.data(), readBuf.size(),
+                                        readBuf.data());
+            raw_value = static_cast<int8_t>(readBuf.at(0));
+            break;
+        default:
+            res = -1;
+    }
+
+    if (res < 0)
+    {
+        if constexpr (DEBUG)
+        {
+            std::cerr << "Path: " << path << ", Addr: " << slaveAddr << "\n";
+        }
+        close_i2c_dev(fd);
+        return false;
+    }
+
+    if (raw_value != 0)
+    {
+        senValue = raw_value * scaleVal + offsetVal;
+    }
+
+    close_i2c_dev(fd);
+    return true;
+}
+
+void NICSensor::handleResponse()
+{
+    if (readingStateGood())
+    {
+        if (senValue != value)
+        {
+            updateValue(senValue);
+        }
+    }
+}
+
+void NICSensor::checkThresholds(void)
+{
+    if (!readingStateGood())
+    {
+        markAvailable(false);
+        return;
+    }
+
+    thresholds::checkThresholdsPowerDelay(this, thresholdTimer);
+}
diff --git a/src/NICSensorMain.cpp b/src/NICSensorMain.cpp
new file mode 100644
index 0000000..64390be
--- /dev/null
+++ b/src/NICSensorMain.cpp
@@ -0,0 +1,292 @@
+#include <NICSensor.hpp>
+#include <Utils.hpp>
+#include <boost/algorithm/string/predicate.hpp>
+#include <boost/algorithm/string/replace.hpp>
+#include <boost/container/flat_set.hpp>
+#include <sdbusplus/asio/connection.hpp>
+#include <sdbusplus/asio/object_server.hpp>
+
+#include <filesystem>
+#include <fstream>
+#include <regex>
+
+namespace fs = std::filesystem;
+static constexpr std::array<const char*, 1> sensorTypes = {
+    "xyz.openbmc_project.Configuration.NIC"};
+
+static boost::container::flat_map<std::string, std::string> sensorTable;
+static boost::container::flat_map<std::string, ReadMode> modeTable;
+static constexpr double maxReading = 255;
+static constexpr double minReading = 0;
+
+void createSensors(
+    boost::asio::io_service& io, sdbusplus::asio::object_server& objectServer,
+    boost::container::flat_map<std::string, std::shared_ptr<NICSensor>>&
+        sensors,
+    std::shared_ptr<sdbusplus::asio::connection>& dbusConnection,
+    const std::shared_ptr<boost::container::flat_set<std::string>>&
+        sensorsChanged)
+{
+    bool firstScan = sensorsChanged == nullptr;
+    // use new data the first time, then refresh
+    ManagedObjectType sensorConfigurations;
+    bool useCache = false;
+    for (const char* type : sensorTypes)
+    {
+        if (!getSensorConfiguration(type, dbusConnection, sensorConfigurations,
+                                    useCache))
+        {
+            std::cerr << "error communicating to entity manager\n";
+            return;
+        }
+        useCache = true;
+    }
+
+    for (const std::pair<sdbusplus::message::object_path, SensorData>& sensor :
+         sensorConfigurations)
+    {
+        const SensorData* sensorData = nullptr;
+        const std::string* interfacePath = nullptr;
+        const char* sensorType = nullptr;
+        const std::pair<std::string, boost::container::flat_map<
+                                         std::string, BasicVariantType>>*
+            baseConfiguration = nullptr;
+
+        sensorData = &(sensor.second);
+        for (const char* type : sensorTypes)
+        {
+            auto sensorBase = sensorData->find(type);
+            if (sensorBase != sensorData->end())
+            {
+                baseConfiguration = &(*sensorBase);
+                sensorType = type;
+                break;
+            }
+        }
+        if (baseConfiguration == nullptr)
+        {
+            std::cerr << "error finding base configuration for NIC \n";
+            continue;
+        }
+
+        auto configurationBus = baseConfiguration->second.find("Bus");
+        auto configurationAddress = baseConfiguration->second.find("Address");
+        auto configurationCmd = baseConfiguration->second.find("Command");
+
+        if (configurationBus == baseConfiguration->second.end() ||
+            configurationAddress == baseConfiguration->second.end() ||
+            configurationCmd == baseConfiguration->second.end())
+        {
+            std::cerr << "fail to find the bus, addr, cmd, or page in JSON\n";
+            continue;
+        }
+
+        uint8_t busId =
+            static_cast<uint8_t>(std::get<uint64_t>(configurationBus->second));
+        std::string i2cBus =
+            "/sys/class/i2c-dev/i2c-" + std::to_string(busId) + "/device";
+        uint8_t slaveAddr = static_cast<uint8_t>(
+            std::get<uint64_t>(configurationAddress->second));
+        uint8_t cmdCode =
+            static_cast<uint8_t>(std::get<uint64_t>(configurationCmd->second));
+
+        if (0x80 <= slaveAddr)
+        {
+            std::cerr
+                << "error i2c slave addr is out of the range (7-bit addr)\n";
+            continue;
+        }
+
+        interfacePath = &(sensor.first.str);
+        if (interfacePath == nullptr)
+        {
+            std::cerr << " invalid sensor interface path\n";
+            continue;
+        }
+
+        auto findSensorName = baseConfiguration->second.find("Name");
+        if (findSensorName == baseConfiguration->second.end())
+        {
+            std::cerr << "fail to find sensor name in JSON\n";
+            continue;
+        }
+        std::string sensorName = std::get<std::string>(findSensorName->second);
+
+        // Sensor Type: power, curr, temp, volt
+        auto findSensorTypeJson = baseConfiguration->second.find("SensorType");
+        if (findSensorTypeJson == baseConfiguration->second.end())
+        {
+            std::cerr << "fail to find sensor type in JSON\n";
+            continue;
+        }
+        std::string SensorTypeJson =
+            std::get<std::string>(findSensorTypeJson->second);
+
+        auto findSensorType = sensorTable.find(SensorTypeJson);
+        if (findSensorType == sensorTable.end())
+        {
+            std::cerr << "fail to find match for NIC sensorType: "
+                      << SensorTypeJson << "\n";
+            continue;
+        }
+
+        /* Convert Method: Byte, Word*/
+        auto findModeString = baseConfiguration->second.find("Mode");
+        if (findModeString == baseConfiguration->second.end())
+        {
+            std::cerr << sensorName << " missing mode\n";
+            continue;
+        }
+        auto modeString = std::get<std::string>(findModeString->second);
+
+        auto findMode = modeTable.find(modeString);
+        if (findMode == modeTable.end())
+        {
+            std::cerr << sensorName << " invalid mode: " << modeString << "\n";
+            continue;
+        }
+        ReadMode readMode = findMode->second;
+
+        /* Initialize scale and offset value */
+        double scaleVal = 1;
+        double offsetVal = 0;
+
+        auto findScaleVal = baseConfiguration->second.find("ScaleValue");
+        if (findScaleVal != baseConfiguration->second.end())
+        {
+            scaleVal =
+                std::visit(VariantToDoubleVisitor(), findScaleVal->second);
+        }
+
+        auto findOffsetVal = baseConfiguration->second.find("OffsetValue");
+        if (findOffsetVal != baseConfiguration->second.end())
+        {
+            offsetVal =
+                std::visit(VariantToDoubleVisitor(), findOffsetVal->second);
+        }
+
+        std::optional<double> tctlMax = std::nullopt;
+        auto findTctlMax = baseConfiguration->second.find("TctlMax");
+        if (findTctlMax != baseConfiguration->second.end())
+        {
+
+            tctlMax = std::visit(VariantToDoubleVisitor(), findTctlMax->second);
+        }
+
+        // on rescans, only update sensors we were signaled by
+        auto findSensor = sensors.find(sensorName);
+        if (!firstScan && findSensor != sensors.end())
+        {
+            bool found = false;
+            for (auto it = sensorsChanged->begin(); it != sensorsChanged->end();
+                 it++)
+            {
+                if (boost::ends_with(*it, findSensor->second->name))
+                {
+                    sensorsChanged->erase(it);
+                    findSensor->second = nullptr;
+                    found = true;
+                    break;
+                }
+            }
+            if (!found)
+            {
+                continue;
+            }
+        }
+
+        std::vector<thresholds::Threshold> sensorThresholds;
+        if (!parseThresholdsFromConfig(*sensorData, sensorThresholds))
+        {
+            std::cerr << "error populating thresholds for " << sensorName
+                      << "\n";
+        }
+
+        auto limits = std::make_pair(minReading, maxReading);
+        findLimits(limits, baseConfiguration);
+
+        auto findPowerState = baseConfiguration->second.find("PowerState");
+        PowerState readState = PowerState::biosPost;
+        if (findPowerState != baseConfiguration->second.end())
+        {
+            std::string powerState =
+                std::visit(VariantToStringVisitor(), findPowerState->second);
+            setReadState(powerState, readState);
+        }
+
+        sensors[sensorName] = std::make_shared<NICSensor>(
+            i2cBus, sensorType, objectServer, dbusConnection, io, sensorName,
+            std::move(sensorThresholds), *interfacePath, findSensorType->second,
+            limits.second, limits.first, readState, busId, slaveAddr, cmdCode,
+            readMode, scaleVal, offsetVal, tctlMax);
+        sensors[sensorName]->setupRead();
+    }
+}
+
+void propertyInitialize(void)
+{
+    sensorTable = {{"power", "power/"},
+                   {"curr", "current/"},
+                   {"temp", "temperature/"},
+                   {"volt", "voltage/"}};
+    modeTable = {{"Byte", ReadMode::READ_BYTE}};
+}
+
+int main()
+{
+    boost::asio::io_service io;
+    auto systemBus = std::make_shared<sdbusplus::asio::connection>(io);
+    systemBus->request_name("xyz.openbmc_project.NICSensor");
+    sdbusplus::asio::object_server objectServer(systemBus);
+    boost::container::flat_map<std::string, std::shared_ptr<NICSensor>> sensors;
+    std::vector<std::unique_ptr<sdbusplus::bus::match::match>> matches;
+    std::shared_ptr<boost::container::flat_set<std::string>> sensorsChanged =
+        std::make_shared<boost::container::flat_set<std::string>>();
+
+    propertyInitialize();
+
+    io.post([&]() {
+        createSensors(io, objectServer, sensors, systemBus, nullptr);
+    });
+
+    boost::asio::steady_timer filterTimer(io);
+    std::function<void(sdbusplus::message::message&)> eventHandler =
+        [&](sdbusplus::message::message& message) {
+            if (message.is_method_error())
+            {
+                std::cerr << "callback method error\n";
+                return;
+            }
+            sensorsChanged->insert(message.get_path());
+            // this implicitly cancels the timer
+            filterTimer.expires_from_now(std::chrono::seconds(1));
+
+            filterTimer.async_wait([&](const boost::system::error_code& ec) {
+                if (ec == boost::asio::error::operation_aborted)
+                {
+                    /* we were canceled*/
+                    return;
+                }
+                else if (ec)
+                {
+                    std::cerr << "timer error\n";
+                    return;
+                }
+
+                createSensors(io, objectServer, sensors, systemBus,
+                              sensorsChanged);
+            });
+        };
+
+    for (const char* type : sensorTypes)
+    {
+        auto match = std::make_unique<sdbusplus::bus::match::match>(
+            static_cast<sdbusplus::bus::bus&>(*systemBus),
+            "type='signal',member='PropertiesChanged',path_namespace='" +
+                std::string(inventoryPath) + "',arg0namespace='" + type + "'",
+            eventHandler);
+        matches.emplace_back(std::move(match));
+    }
+
+    io.run();
+}
diff --git a/src/meson.build b/src/meson.build
index fed96b7..19508fd 100644
--- a/src/meson.build
+++ b/src/meson.build
@@ -152,6 +152,26 @@ if get_option('mcu').enabled()
     )
 endif
 
+if get_option('nic').enabled()
+    executable(
+        'nicsensor',
+        'NICSensor.cpp',
+        'NICSensorMain.cpp',
+        dependencies: [
+            i2c,
+            sdbusplus,
+            libobmci2c,
+        ],
+        implicit_include_directories: false,
+        include_directories: '../include',
+        install: true,
+        link_with: [
+            utils_a,
+            thresholds_a,
+        ],
+    )
+endif
+
 if get_option('nvme').enabled()
     mctp = meson.get_compiler('cpp').find_library('libmctp')
     executable(
-- 
2.28.0

