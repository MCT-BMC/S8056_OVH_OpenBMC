From 1eff64fb3799ea12b22a77da3d84729bbac21abe Mon Sep 17 00:00:00 2001
From: Eric Chen <Eric_LC_Chen@wiwynn.com>
Date: Wed, 18 Aug 2021 13:17:39 +0800
Subject: [PATCH 1/3] Revise the algorithm for initializing BMC health
 monitoring
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Description:
- When initializing BMC health monitoring, the service catches CPU usage 120 times continuously and pretend as 2-minute average reading value.
- If BMC was busy only in that short-time moment, it led the misjudgment and sent message “ASSERT: Utilization Sensor has exceeded critical high threshold”"

Design:
- When BMC health monitoring started, update the real-time reading within 120 seconds
- After 120 seconds, update the 120-second average reading and check if the value exceeds the threshold.

Test Step:
1.Reboot BMC to replicate the case that restart BMC health monitoring when BMC was busy.
2.Grep journal logs to check if there's any messages related to BMC health monitoring.

Test Result:
1.Reboot BMC to replicate the case that restart BMC health monitoring when BMC was busy:
root@sv310a:~# reboot
2.Grep journal logs to check if there's any messages related to BMC health monitoring:
root@sv310a:~# journalctl|grep "health"
Aug 18 03:22:38 sv310a systemd[1]: Starting BMC health monitoring...
Aug 18 03:22:40 sv310a health-monitor[200]: CPU Health Sensor initialized
Aug 18 03:22:40 sv310a health-monitor[200]: CPU Health Sensor created
Aug 18 03:22:40 sv310a health-monitor[200]: Memory Health Sensor initialized
Aug 18 03:22:40 sv310a health-monitor[200]: Memory Health Sensor created
Aug 18 03:22:43 sv310a systemd[1]: Started BMC health monitoring.

Related item:
Warning message “ASSERT: Utilization Sensor has exceeded critical high threshold” in journal

%% original patch: 0001-sv310a-Revise-algorithm-for-initializing-BMC-health.patch
---
 healthMonitor.cpp | 45 ++++++++++++++++++++++++++-------------------
 healthMonitor.hpp |  1 +
 2 files changed, 27 insertions(+), 19 deletions(-)

diff --git a/healthMonitor.cpp b/healthMonitor.cpp
index 8861403..0956779 100644
--- a/healthMonitor.cpp
+++ b/healthMonitor.cpp
@@ -257,10 +257,9 @@ void HealthSensor::initHealthSensor()
     }
 
     /* Initialize value queue with initial sensor reading */
-    for (int i = 0; i < sensorConfig.windowSize; i++)
-    {
-        valQueue.push_back(value);
-    }
+    valQueue.push_back(value);
+    sensorConfig.countOverWindow = 1;
+
 
     /* Initialize unit value (Percent) for utilization sensor */
     ValueIface::unit(ValueIface::Unit::Percent);
@@ -345,21 +344,29 @@ void HealthSensor::readHealthSensor()
         return;
     }
 
-    /* Remove first item from the queue */
-    valQueue.pop_front();
-    /* Add new item at the back */
-    valQueue.push_back(value);
-
-    /* Calculate average values for the given window size */
-    double avgValue = 0;
-    avgValue = accumulate(valQueue.begin(), valQueue.end(), avgValue);
-    avgValue = avgValue / sensorConfig.windowSize;
-
-    /* Set this new value to dbus */
-    setSensorValueToDbus(avgValue);
-
-    /* Check the sensor threshold  and log required message */
-    checkSensorThreshold(avgValue);
+    if (sensorConfig.countOverWindow < sensorConfig.windowSize)
+    {
+        /* Add new item at the back */
+        valQueue.push_back(value);
+        /* Set this new value to dbus */
+        setSensorValueToDbus(value);
+        sensorConfig.countOverWindow++;
+    }
+    else
+    {
+        double avgValue = 0;
+        /* Remove first item from the queue */
+        valQueue.pop_front();
+        /* Add new item at the back */
+        valQueue.push_back(value);
+        /* Calculate average values for the given window size */
+        avgValue = accumulate(valQueue.begin(), valQueue.end(), avgValue);
+        avgValue = avgValue / sensorConfig.windowSize;
+        /* Set this new value to dbus */
+        setSensorValueToDbus(avgValue);
+        /* Check the sensor threshold  and log required message */
+        checkSensorThreshold(avgValue);
+    }
 }
 
 void printConfig(HealthConfig& cfg)
diff --git a/healthMonitor.hpp b/healthMonitor.hpp
index 4eedfb3..b117a7d 100644
--- a/healthMonitor.hpp
+++ b/healthMonitor.hpp
@@ -34,6 +34,7 @@ struct HealthConfig
     std::string name;
     uint16_t freq;
     uint16_t windowSize;
+    uint16_t countOverWindow;
     double criticalHigh;
     double warningHigh;
     bool criticalLog;
-- 
2.32.0

