From cca67784bf030358eb9ee15d17acf346b7726c9c Mon Sep 17 00:00:00 2001
From: Wayne Tung <Wayne_Tung@wiwynn.com>
Date: Fri, 27 Aug 2021 15:05:36 +0800
Subject: [PATCH] Support persist option for group in json

---
 group.cpp       |  5 ++++-
 group.hpp       |  6 ++++--
 json-parser.hpp | 10 +++++++---
 led-main.cpp    |  7 ++++---
 4 files changed, 19 insertions(+), 9 deletions(-)

diff --git a/group.cpp b/group.cpp
index 33c64f6..333538d 100644
--- a/group.cpp
+++ b/group.cpp
@@ -37,7 +37,10 @@ bool Group::asserted(bool value)
     auto result = manager.setGroupState(path, value, ledsAssert, ledsDeAssert);
 
     // Store asserted state
-    serialize.storeGroups(path, result);
+    if (persist)
+    {
+        serialize.storeGroups(path, result);
+    }
 
     // If something does not go right here, then there should be an sdbusplus
     // exception thrown.
diff --git a/group.hpp b/group.hpp
index 57c33d9..6bb17b0 100644
--- a/group.hpp
+++ b/group.hpp
@@ -38,13 +38,13 @@ class Group :
      * @param[in] callBack  - Custom callback when LED group is asserted
      */
     Group(sdbusplus::bus::bus& bus, const std::string& objPath,
-          Manager& manager, Serialize& serialize,
+          Manager& manager, Serialize& serialize, const bool persist,
           std::function<void(Group*, bool)> callBack = nullptr) :
 
         sdbusplus::server::object::object<
             sdbusplus::xyz::openbmc_project::Led::server::Group>(
             bus, objPath.c_str(), true),
-        path(objPath), manager(manager), serialize(serialize),
+        path(objPath), manager(manager), serialize(serialize), persist(persist),
         customCallBack(callBack)
     {
         // Initialize Asserted property value
@@ -74,6 +74,8 @@ class Group :
     /** @brief The serialize class for storing and restoring groups of LEDs */
     Serialize& serialize;
 
+    bool persist;
+
     /** @brief Custom callback when LED group is asserted
      */
     std::function<void(Group*, bool)> customCallBack;
diff --git a/json-parser.hpp b/json-parser.hpp
index 245587d..8684a7a 100644
--- a/json-parser.hpp
+++ b/json-parser.hpp
@@ -17,6 +17,7 @@ namespace fs = std::filesystem;
 using Json = nlohmann::json;
 using LedAction = std::set<phosphor::led::Layout::LedAction>;
 using LedMap = std::map<std::string, LedAction>;
+using PersistLedMap = std::map<std::string, bool>;
 
 // Priority for a particular LED needs to stay SAME across all groups
 // phosphor::led::Layout::Action can only be one of `Blink` and `On`
@@ -104,10 +105,11 @@ void validatePriority(const std::string& name,
  *
  *  @return LedMap - Generated an std::map of LedAction
  */
-const LedMap loadJsonConfig(const fs::path& path)
+const std::pair<LedMap, PersistLedMap> loadJsonConfig(const fs::path& path)
 {
     LedMap ledMap{};
     PriorityMap priorityMap{};
+    PersistLedMap persistLedMap{};
 
     // define the default JSON as empty
     const Json empty{};
@@ -120,6 +122,7 @@ const LedMap loadJsonConfig(const fs::path& path)
         tmpPath /= entry.value("group", "");
         auto objpath = tmpPath.string();
         auto members = entry.value("members", empty);
+        bool persist = entry.value("persist", true);
 
         LedAction ledActions{};
         for (const auto& member : members)
@@ -144,16 +147,17 @@ const LedMap loadJsonConfig(const fs::path& path)
         // Generated an std::map of LedGroupNames to std::set of LEDs
         // containing the name and properties.
         ledMap.emplace(objpath, ledActions);
+        persistLedMap.emplace(objpath, persist);
     }
 
-    return ledMap;
+    return {ledMap, persistLedMap};
 }
 
 /** @brief Get led map from LED groups JSON config
  *
  *  @return LedMap - Generated an std::map of LedAction
  */
-const LedMap getSystemLedMap()
+const std::pair<LedMap, PersistLedMap> getSystemLedMap()
 {
     // Get a new Dbus
     auto bus = sdbusplus::bus::new_bus();
diff --git a/led-main.cpp b/led-main.cpp
index df057a5..b8d19f8 100644
--- a/led-main.cpp
+++ b/led-main.cpp
@@ -31,7 +31,7 @@ int main(void)
 #endif
 
     /** @brief Group manager object */
-    phosphor::led::Manager manager(bus, systemLedMap);
+    phosphor::led::Manager manager(bus, systemLedMap.first);
 
     /** @brief sd_bus object manager */
     sdbusplus::server::manager::manager objManager(bus, OBJPATH);
@@ -58,10 +58,11 @@ int main(void)
 #endif
 
     /** Now create so many dbus objects as there are groups */
-    for (auto& grp : systemLedMap)
+    for (auto& grp : systemLedMap.first)
     {
         groups.emplace_back(std::make_unique<phosphor::led::Group>(
-            bus, grp.first, manager, serialize));
+            bus, grp.first, manager, serialize,
+            systemLedMap.second[grp.first]));
     }
 
     // Attach the bus to sd_event to service user requests
-- 
2.32.0

